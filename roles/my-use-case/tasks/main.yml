---

#
# Setting some global facts!
- set_fact:
    dt_tenant_no_protocol: "{{ dynatrace_tenant_url | regex_search('[^\/\/]*$') }}"

- set_fact:
    tenant_id: "{{ dt_tenant_no_protocol | split('.') }}"

- set_fact:
    usecase_source: "{{ role_path }}/files"
    usecase_dest: "{{ role_path }}/gitlabfiles"

- debug:
    msg: | 
      "Platform Engineering HoT automated provisioning started..."
      "tenant_id: {{ tenant_id }}"
      "usecase_source: {{ usecase_source }}"
      "usecase_dest: {{ usecase_dest }}"

#
# Creating Some Dynatrace Tokens
- name: Create all Dynatrace Tokens
  block:
    - include_role:
        name: dt-access-token
      vars:
        access_token_var_name: "dt_all_ingest_token"
        access_token_scope: [ "bizevents.ingest","events.ingest","logs.ingest","metrics.ingest","openTelemetryTrace.ingest","DataExport", "entities.read", "settings.read", "settings.write", "activeGateTokenManagement.create", "openpipeline.events.custom", "openpipeline.events", "openpipeline.events_sdlc",  "openpipeline.events_sdlc.custom", "openpipeline.events_security.custom",  ]
    - include_role:
        name: dt-access-token
      vars:
        access_token_var_name: "dt_op_token"
        access_token_scope: [ "InstallerDownload", "DataExport", "entities.read", "settings.read","settings.write", "activeGateTokenManagement.create" ]
    - include_role:
        name: dt-access-token
      vars:
        access_token_var_name: "monaco_token"
        access_token_scope: [ "settings.read", "settings.write", "slo.read", "slo.write", "DataExport", "ExternalSyntheticIntegration", "ReadConfig", "WriteConfig" ]
  rescue:
    - name: Rescue Message
      debug:
        msg: "Something happened during creating Dynatrace tokens" 

- include_role:
    name: dt-platform
    tasks_from: ensure-app
  vars:
    dt_app_id: "{{ item.dt_app_id }}"
    dt_environment_url_gen3: "{{ extra_vars.dt_environment_url_gen3 }}"
    dt_oauth_sso_endpoint: "{{ extra_vars.dt_oauth_sso_endpoint }}"
    dt_oauth_client_id: "{{ extra_vars.dt_oauth_client_id }}"
    dt_oauth_client_secret: "{{ extra_vars.dt_oauth_client_secret }}"
    dt_oauth_account_urn: "{{ extra_vars.dt_oauth_account_urn }}"
  loop:
    - dt_app_id: "dynatrace.davis.problems"
      dt_app_version: "1.6.0"
    - dt_app_id: "dynatrace.gitlab.connector"
      dt_app_version: "1.1.3"
    - dt_app_id: "dynatrace.synthetic.workflow.action"
      dt_app_version: "1.2.1"      

#
# Configure Dynatrace Tenant, e.g: new K8s Experience
- name: Configure Dynatrace Settings
  block:
    - name: Configure tenant setting new k8s app
      shell: >
        curl -X 'POST' \
          '{{ dynatrace_tenant_url.rstrip('/') }}/api/v2/settings/objects?validateOnly=false' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json; charset=utf-8' \
          -H 'Authorization: Api-Token {{ monaco_token }}' \
          -d '[
                {
                  "schemaId": "builtin:app-transition.kubernetes",
                  "schemaVersion": "1.0.1",
                  "scope": "environment",
                  "value": {  
                      "kubernetesAppOptions": {
                        "enableKubernetesApp": true
                      }
                  }
                }
              ]'
      register: ps
    - debug: var=ps.stdout_lines
    - name: Configure Prometheus Exporter Ingest
      shell: >
        curl -X 'POST' \
          '{{ dynatrace_tenant_url.rstrip('/') }}/api/v2/settings/objects?validateOnly=false' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json; charset=utf-8' \
          -H 'Authorization: Api-Token {{ monaco_token }}' \
          -d '[
                {
                  "schemaId":"builtin:cloud.kubernetes.monitoring",
                  "schemaVersion":"1.0.2",
                  "scope":"environment",
                  "value": {
                    "cloudApplicationPipelineEnabled":true,
                    "openMetricsPipelineEnabled":true,
                    "openMetricsBuiltinEnabled":true,
                    "eventProcessingActive":false
                  }
                }
              ]'
    - name: Enable Outbound Connections
      shell: >
        curl -X 'POST' \
          '{{ dynatrace_tenant_url.rstrip('/') }}/api/v2/settings/objects?validateOnly=false' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json; charset=utf-8' \
          -H 'Authorization: Api-Token {{ monaco_token }}' \
          -d '[
                {
                  "schemaId":"builtin:dt-javascript-runtime.allowed-outbound-connections",
                  "schemaVersion":"1.0.2",
                  "scope":"environment",
                  "value": {
                    "allowedOutboundConnections":{
                      "enforced":false
                    }
                  }
                }
              ]'
  rescue:
    - name: Rescue Message
      debug:
        msg: "Configure Dynatrace Settings encountered an error, but we continue."

#
# Install K3s
- include_role:
    name: k3s
  vars:
    k3s_pod_limit: 200

#
# Install Dynatrace Operator
# - include_role:
#     name: dt-operator

#
# Install the OTel Collector
# - include_role:
#     name: otel-collector

#
# Install GitLab
- include_role:
    name: gitlab

- include_role:
    name: private-registry

#
# Configure GitLab: Groups, Variables, Projects ...
- name: Configure GitLab
  block:
    - name: Gitlab - Ensure Group
      include_role:
        name: gitlab
        tasks_from: ensure-group
      vars:
        gitlab_group_name: "{{ gitlab_group }}"
    - name: Gitlab - Ensure Default Group Vars
      include_role:
        name: gitlab
        tasks_from: ensure-default-group-vars
      vars:
        gitlab_group_name: "{{ gitlab_group }}"
    #
    # Create GitLab Projects: Backstage Template, App Template & Platform
    - name: Gitlab - Ensure Backstage Template Project
      include_role:
        name: gitlab
        tasks_from: ensure-project
      vars:
        gitlab_prj: "{{ gitlab_backstage_template_repo_name }}"
        gitlab_prj_namespace_id: "{{ gitlab_group_id }}"

    - name: Gitlab - Ensure App Template Project
      include_role:
        name: gitlab
        tasks_from: ensure-project
      vars:
        gitlab_prj: "{{ gitlab_app_template_repo_name }}"
        gitlab_prj_namespace_id: "{{ gitlab_group_id }}"

    - name: Gitlab - Ensure Platform Project
      include_role:
        name: gitlab
        tasks_from: ensure-project
      vars:
        gitlab_prj: "{{ gitlab_platform_repo_name }}"
        gitlab_prj_namespace_id: "{{ gitlab_group_id }}"    

    - include_role:
        name: gitlab
        tasks_from: source-endpoints-external
      when: gitlab_external_endpoint is not defined

    - include_role:
        name: gitlab
        tasks_from: source-secret
      when: gitlab_personal_access_token is not defined or gitlab_username is not defined or gitlab_password is not defined

    - name: Gitlab - Additional Environment Variables
      include_role:
        name: gitlab
        tasks_from: ensure-group-var
      vars:
        gitlab_var_key: "{{ item.key }}"
        gitlab_var_value: "{{ item.value }}"
      loop:
        - {
            key: "DT_PLATFORM_TENANT_URL",
            value: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') }}",
          }
        - {
            key: "DT_OAUTH_CLIENT_ID",
            value: "{{ extra_vars.dt_oauth_client_id }}",
          }
        - {
            key: "DT_OAUTH_CLIENT_SECRET",
            value: "{{ extra_vars.dt_oauth_client_secret }}",
          }
        - {
            key: "DT_OAUTH_SSO_ENDPOINT",
            value: "{{ extra_vars.dt_oauth_sso_endpoint.rstrip('/') }}",
          }
        - {
            key: "DT_OAUTH_ACCOUNT_URN",
            value: "{{ extra_vars.dt_oauth_account_urn }}",
          }
        - { key: "GITLAB_USERNAME", value: "{{ gitlab_username }}" }
        - { key: "GITLAB_PASSWORD", value: "{{ gitlab_password }}" }
        - {
            key: "GITLAB_PRIVATE_TOKEN",
            value: "{{ gitlab_personal_access_token }}",
          }
        - {
            key: "GITLAB_EXTERNAL_ENDPOINT",
            value: "{{ gitlab_external_endpoint }}",
          }
        - { key: "DEMO_IDENTIFIER", value: "{{ demo_identifier }}" }

    - name: Source Gitlab endpoint
      include_role:
        name: gitlab
        tasks_from: source-endpoints
    - name: Create GitLab Connector Connection Settings Object in Dynatrace
      shell: >
        curl -X 'POST' \
          '{{ dynatrace_tenant_url.rstrip('/') }}/api/v2/settings/objects?validateOnly=false' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json; charset=utf-8' \
          -H 'Authorization: Api-Token {{ monaco_token }}' \
          -d '[
                {
                  "schemaId":"app:dynatrace.gitlab.connector:connection",
                  "scope":"environment",
                  "value": {
                    "name": "platform-engineering-gitlab",
                    "url": "{{ gitlab_external_endpoint }}",
                    "token": "{{ gitlab_personal_access_token }}"
                  }
                }
              ]'
      register: dt_gitlab_connection_response
    - name: Capture GitLab Connector Connection Settings Object ID
      set_fact:
        dt_gitlab_connection_id: "{{ dt_gitlab_connection_response.stdout | from_json | json_query('[0].objectId') }}"
      when: dt_gitlab_connection_response is defined
  rescue:
    - name: Rescue Message
      debug:
        msg: "Something happened during setting up GitLab Projects, Groups ..."         

#
# Copy all files for the 3 GitLab Repos from files to gitlabfiles
# > then replace PLACEHOLDERS
# > then upload to gitlab
- name: Prepare all GitLab Files we want to upload
  block:
    - name: Delete Git repo files
      ansible.builtin.file:
        path: "{{ usecase_dest }}/"
        state: absent

    - name: Copy Git repo files
      ansible.builtin.copy:
        src: "{{ usecase_source }}/"
        dest: "{{ usecase_dest }}/"
        force: true
        remote_src: yes
        directory_mode: "u+rwx"

    - set_fact:    
        gitlab_repo_base_url: "{{ gitlab_external_endpoint }}/{{ gitlab_group }}"
        apptemplates_dest: "{{ usecase_dest }}/apptemplates"
        backstagetemplates_dest: "{{ usecase_dest }}/backstagetemplates"
        platform_dest: "{{ usecase_dest }}/platform"    

    - name: Replace PLACEHOLDERS for template files in git
      shell: |
        pwd
        cd {{ usecase_dest }}
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#GEOLOCATION_PLACEHOLDER#{{ dynatrace_geolocation }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#DT_TENANT_LIVE_PLACEHOLDER#{{ dynatrace_tenant_url.rstrip('/') }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#DT_TENANT_APPS_PLACEHOLDER#{{ extra_vars.dt_environment_url_gen3.rstrip('/') }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#BASE_DOMAIN_PLACEHOLDER#{{ ingress_domain }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#FORKED_TEMPLATE_REPO_PLACEHOLDER#{{ gitlab_repo_base_url }}/platform#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#PROTOCOL_PLACEHOLDER#{{ ingress_protocol }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#DT_EVENT_INGEST_TOKEN_PLACEHOLDER#{{ dt_all_ingest_token }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#GITLAB_PAT_PLACEHOLDER#{{ gitlab_personal_access_token }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#GITLAB_CONNECTION_PLACEHOLDER#{{ dt_gitlab_connection_id }}#g" {} \;
  rescue:
    - name: Rescue Message
      debug:
        msg: "Something happened during prepring GitLab files"        

- name: Publish to Gitlab
  block:
    - name: Publish apptemplates to Gitlab
      include_role:
        name: repository
      ignore_errors: yes
      vars:
        git_username: "root"
        git_password: "{{ gitlab_password }}"
        git_domain: "{{ gitlab_domain }}"
        git_remote: "gitlab"
        git_org: "{{ gitlab_group }}"
        git_repo: "{{ gitlab_app_template_repo_name }}"
        repo_src: "{{ apptemplates_dest }}"
    - name: Publish Backstage Templates
      include_role:
        name: repository
      ignore_errors: yes
      vars:
        git_username: "root"
        git_password: "{{ gitlab_password }}"
        git_domain: "{{ gitlab_domain }}"
        git_remote: "gitlab"
        git_org: "{{ gitlab_group }}"
        git_repo: "{{ gitlab_backstage_template_repo_name }}"
        repo_src: "{{ backstagetemplates_dest }}"
    - name: Publish Platform to Gitlab
      include_role:
        name: repository
      ignore_errors: yes
      vars:
        git_username: "root"
        git_password: "{{ gitlab_password }}"
        git_domain: "{{ gitlab_domain }}"
        git_remote: "gitlab"
        git_org: "{{ gitlab_group }}"
        git_repo: "{{ gitlab_platform_repo_name }}"
        repo_src: "{{ platform_dest }}"
  rescue:
    - name: Rescue Message
      debug:
        msg: "GitLab Upload failed but we are continuing"

#
# Now lets install ArgoCD
- include_role:
    name: argocd-andi

- name: Get API Token to ArgoCD
  block:
    - name: Create Argo Config Map to define user Alice for API Access
      kubernetes.core.k8s:
        state: present
        definition:
          kind: ConfigMap
          metadata:
            name: argocd-cm
            namespace: argocd
            labels:
              app.kubernetes.io/name: argocd-cm
              app.kubernetes.io/part-of: argocd
          data:
            accounts.alice: apiKey, login
            accounts.alice.enabled: "true"
            statusbadge.enabled: "true"
            context: |
              argocdUrl: "{{ ingress_protocol }}://argo.{{ ingress_domain }}"        
    - name: Install ArgoCD CLI
      become_user: root
      shell: |
        wget -O argocd https://github.com/argoproj/argo-cd/releases/download/v2.10.5/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/bin
        kubectl config set-context --current --namespace=argocd
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        argocd login argo --core        
        argocd account generate-token --account alice > argotoken.txt
    - name: Get ArgoCD Token
      become_user: root
      shell: cat argotoken.txt
      register: argocd_token
  rescue:
    - name: Rescue Message
      debug:
        msg: "Creating Argo CD Token Failed. Fallback!"
    - set_fact:    
        argocd_token: "INVALID_TOKEN"

- set_fact:
    argocd_token: "{{ argocd_token.stdout }}"
  when: argocd_token != "INVALID_TOKEN"

#
# Lets create some secrets that tools like Backstage, Argo Workflows ... need
# NEEDS TO HAPPEN BEFORE ArgoCD deploys our platform
- name: Create Backstage Namespace and Secrets
  block:
    - name: Create Backstage namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: backstage
    - name: Create Backstage Secret
      kubernetes.core.k8s:
        name: "backstage-secrets"
        api_version: v1
        kind: Secret
        state: present
        namespace: "backstage"
        resource_definition:
          type: Opaque
          data:
            GITLAB_TOKEN: "{{ gitlab_personal_access_token | b64encode }}"
            ARGOCD_TOKEN: "{{ argocd_token | b64encode }}"
            DT_TENANT_LIVE: "{{ dynatrace_tenant_url.rstrip('/') | b64encode }}"
            DT_TENANT_APPS: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') | b64encode }}"
            DT_EVENT_INGEST_TOKEN: "{{ dt_all_ingest_token | b64encode }}"
            DT_TENANT_NAME: "{{ tenant_id[0] | b64encode }}"
            DT_OAUTH_CLIENT_ID: "{{ extra_vars.dt_oauth_client_id | b64encode }}"
            DT_OAUTH_CLIENT_SECRET: "{{ extra_vars.dt_oauth_client_secret | b64encode }}"
            DT_OAUTH_ACCOUNT_URN: "{{ extra_vars.dt_oauth_account_urn | b64encode }}"
  rescue:
    - name: Rescue Message
      debug:
        msg: "Creating Backstage namespace and secrets failed but we continue"

#
# For Dynatrace we need to create a several secrets in various namespaces
# As Dynatrace and OpenTelemetry namepsaces are not yet created also create those namespaces first
- name: Create Observability Related Namespace and Secrets
  block:
    - name: Create Dynatrace namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: dynatrace
    - name: Create OpenTelemetry namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: opentelemetry
    - name: Create Dynatrace Operator Secret
      kubernetes.core.k8s:
        name: "hot-day-platform-engineering"
        api_version: v1
        kind: Secret
        state: present
        namespace: "dynatrace"
        resource_definition:
          type: Opaque
          data:
            apiToken: "{{ dt_op_token | b64encode }}"
            dataIngestToken: "{{ dt_all_ingest_token | b64encode }}"
    - name: Create OTel Operator Secret
      kubernetes.core.k8s:
        name: "dt-details"
        api_version: v1
        kind: Secret
        state: present
        namespace: "opentelemetry"
        resource_definition:
          type: Opaque
          data:
            DT_URL: "{{ dynatrace_tenant_url.rstrip('/') | b64encode }}"
            DT_OTEL_ALL_INGEST_TOKEN: "{{ dt_all_ingest_token | b64encode }}"
    - name: Create Monaco Secret in ArgoCD namespace
      kubernetes.core.k8s:
        name: "monaco-secret"
        api_version: v1
        kind: Secret
        state: present
        namespace: "argocd"
        resource_definition:
          type: Opaque
          data:
            monacoToken: "{{ monaco_token | b64encode }}"
            oAuthClientID: "{{ extra_vars.dt_oauth_client_id | b64encode }}"
            oAuthClientSecret: "{{ extra_vars.dt_oauth_client_secret | b64encode }}"
    - name: Create ArgoCD Notifications Secret in ArgoCD namespace
      kubernetes.core.k8s:
        name: "argocd-notifications-secret"
        api_version: v1
        kind: Secret
        state: present
        namespace: "argocd"
        resource_definition:
          type: Opaque
          data:
            dynatrace-url: "{{ dynatrace_tenant_url.rstrip('/') | b64encode }}"
            dynatrace-token: "{{ dt_all_ingest_token | b64encode }}"
    - name: Create Monaco Secret in Dynatrace namespace
      kubernetes.core.k8s:
        name: "monaco-secret"
        api_version: v1
        kind: Secret
        state: present
        namespace: "dynatrace"
        resource_definition:
          type: Opaque
          data:
            monacoToken: "{{ monaco_token | b64encode }}"
            oAuthClientID: "{{ extra_vars.dt_oauth_client_id | b64encode }}"
            oAuthClientSecret: "{{ extra_vars.dt_oauth_client_secret | b64encode }}"
    - name: Create Dynatrace BizEvent Secret
      kubernetes.core.k8s:
        name: "dt-bizevent-oauth-details"
        api_version: v1
        kind: Secret
        state: present
        namespace: "dynatrace"
        resource_definition:
          type: Opaque
          data:
            dtTenant: "{{ dynatrace_tenant_url.rstrip('/') | b64encode }}"
            dtToken: "{{ dt_all_ingest_token | b64encode }}"
            oAuthClientID: "{{ extra_vars.dt_oauth_client_id | b64encode }}"
            oAuthClientSecret: "{{ extra_vars.dt_oauth_client_secret | b64encode }}"
            accountURN: "{{ extra_vars.dt_oauth_account_urn | b64encode }}"
  rescue:
    - name: Rescue Message
      debug:
        msg: "Creating secrets failed but we continue execution"            

#
# Upload Relevant Configs such as notebooks, dashboards, ...
# Doing this from the gitlabfiles directory as this is the one that also includes the PLACEHOLDER replacements
- name: Upload Dynatrace Workflows
  block:
    - include_tasks:
        file: add-gen3-workflow.yml
      vars:
        path_to_workflow: "{{ usecase_dest }}/dynatraceassets/workflows/lifecycle-events-workflow.json"
        workflow_name: "lifecycle-events"
      ignore_errors: yes
    - set_fact:
        lifecycle_workflow_id: "{{ workflow_id }}"      
    - include_tasks:
        file: add-gen3-workflow.yml
      vars:
        path_to_workflow: "{{ usecase_dest }}/dynatraceassets/workflows/srg-notifications-workflow.json"
        workflow_name: "srg-notifications"
      ignore_errors: yes
  rescue:
    - name: Rescue Message
      debug:
        msg: "Uploading Dynatrace Workflows failed but we keep going"
    - set_fact:
        lifecycle_workflow_id: "111"


- name: Upload Dynatrace Dashboards
  block:
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/dashboards/ArgoCD Platform Observability.json"
        document_name: "ArgoCD Platform Observability"
        document_type: "dashboard"
      ignore_errors: yes
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/dashboards/Platform Observability Cockpit.json"
        document_name: "Platform Observability Cockpit"
        document_type: "dashboard"
      ignore_errors: yes
    - set_fact:
        platformobscockpit_document_id: "{{ document_id }}"
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/dashboards/GitLAB.json"
        document_name: "GitLAB"
        document_type: "dashboard"
      ignore_errors: yes
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/dashboards/Releases Overview.json"
        document_name: "Releases Overview"
        document_type: "dashboard"
      ignore_errors: yes
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/dashboards/Team Ownership Dashboard.json"
        document_name: "Team Ownership Dashboard"
        document_type: "dashboard"
      ignore_errors: yes
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/dashboards/Backstage Error Analysis.json"
        document_name: "Backstage Error Analysis"
        document_type: "dashboard"
      ignore_errors: yes      
  rescue:
    - name: Rescue Message
      debug:
        msg: "Uploading Dynatrace Dashboards failed but we keep going"

- name: Upload Dynatrace Notebooks
  block:
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/notebooks/ArgoCD Log Analytics.json"
        document_name: "ArgoCD Log Analytics"
        document_type: "notebook"
      ignore_errors: yes
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/notebooks/SRG Objectives.json"
        document_name: "SRG Objectives"
        document_type: "notebook"
      ignore_errors: yes      
    - set_fact:
        srgobjective_document_id: "{{ document_id }}"      
  rescue:
    - name: Rescue Message
      debug:
        msg: "Uploading Dynatrace Dashboards failed but we keep going"
    - set_fact:
        lifecycle_workflow_id: "111"

- name: Prepare and Upload Launchpad
  block:
    - name: Replace PLACEHOLDERS for template files in git
      shell: |
        pwd
        cd {{ usecase_dest }}
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#PLATFORMOBSCOCKPIT_DOCUMENTID_PLACEHOLDER#{{ platformobscockpit_document_id }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#SRGOBJECTIVES_DOCUMENTID_PLACEHOLDER#{{ srgobjective_document_id }}#g" {} \;
        find . -type f \( -not -path '*/\.*' -not -iname "README.md" \) -exec sed -i "s#LIFECYCLE_WORKFLOWID_PLACEHOLDER#{{ lifecycle_workflow_id }}#g" {} \;        
    - include_tasks:
        file: add-gen3-document.yml
      vars:
        path_to_document: "{{ usecase_dest }}/dynatraceassets/launchpads/Platform Engineering Launchpad.json"
        document_name: "Platform Engineering Launchpad"
        document_type: "launchpad"
      ignore_errors: yes
    - set_fact:
        launchpad_document_id: "{{ document_id }}"
  rescue:
    - name: Rescue Message
      debug:
        msg: "Uploading Dynatrace Launchpad failed but we keep going"
    - set_fact:
        launchpad_document_id: "111"


#
# This will connect ArgoCD to the GitLab Platform Repo
# ArgoCD will find the Platform Definition and will start to deploy the Platform (Backstage, Workflows ...)
- name: Connect ArgoCD to GitLab Platform Repote
  include_role:
    name: argocd-andi
    tasks_from: ensure-gitlab-application-set
  vars:
    argocd_appset_repositorymatch: "platform"
    argocd_gitlab_generator_k8s_path: "applications/platform"
    argocd_gitlab_generator_owner: "group1"
#
# Final Step. Add our use case specific links to the ACE Dashboard
- name: Add Use Case Links to ACE Dashboard
  block:
  - set_fact:
      include_dashboard_value_file: "{{ role_path }}/templates/my-use-case.yml.j2" # rename with your use case name 

  - include_role:
      name: dashboard
      tasks_from: template-values-file

- include_role:
    name: dashboard
