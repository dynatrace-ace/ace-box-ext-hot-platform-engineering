{
  "id": "8af1f7b8-c097-4456-bfb3-abeaeeb177bb",
  "title": "SRG Notification Workflow",
  "tasks": {
    "http_get_projects": {
      "name": "http_get_projects",
      "action": "dynatrace.automations:http-function",
      "description": "Query GitLab API for Projects",
      "input": {
        "url": "{{ result(\"js_set_parameters\")['gitlabEndpoint'] }}/api/v4/projects?simple=true&search={{result(\"js_process_messages\")['gitlab_project']}}",
        "method": "GET",
        "headers": {
          "PRIVATE-TOKEN": "{{ result(\"js_set_parameters\")['gitlabToken'] }}"
        },
        "failOnResponseCodes": "400-599"
      },
      "position": {
        "x": 1,
        "y": 5
      },
      "predecessors": [
        "js_process_messages"
      ],
      "conditions": {
        "states": {
          "js_process_messages": "SUCCESS"
        },
        "custom": "{{ result(\"js_process_messages\")['notify'] == true and result(\"js_process_messages\")['gitlab_project'] is defined }}"
      }
    },
    "js_get_project_id": {
      "name": "js_get_project_id",
      "action": "dynatrace.automations:run-javascript",
      "description": "Parse GitLab Projects and find relevant Project Id",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\nconst PROJECTS_TASK = 'http_get_projects';\nconst MESSAGES_TASK = 'js_process_messages';\n\nexport default async function ({ execution_id }) {\n  \n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n\n  // declare new variables to easily access the parameters within this task\n  // const PARAMETER = parameters['PARAMETER'];\n\n  // projects payload from previous task\n  const projects_result = await ex.result(PROJECTS_TASK);\n  const projects_array = projects_result['json'];\n\n  // project name from previous task\n  const messages_result = await ex.result(MESSAGES_TASK);\n  const gitlab_project = messages_result['gitlab_project'];\n\n  // find the project id using the project name\n  function findIdByName(items: [], targetName: string): number | undefined {\n    const item = items.find(item => item.name === targetName);\n    return item?.id;\n  }\n  const id = findIdByName(projects_array, gitlab_project);\n  \n  return {\n    gitlab_project: gitlab_project,\n    gitlab_project_id: id,\n  }\n\n  \n}"
      },
      "position": {
        "x": 1,
        "y": 6
      },
      "predecessors": [
        "http_get_projects"
      ],
      "conditions": {
        "states": {
          "http_get_projects": "SUCCESS"
        },
        "custom": "{{ result(\"http_get_projects\")[\"json\"] | length > 0 }}"
      }
    },
    "js_set_parameters": {
      "name": "js_set_parameters",
      "action": "dynatrace.automations:run-javascript",
      "description": "Set Workflow-wide defaults that can be used by any task",
      "input": {
        "script": "export default async function ({ execution_id }) {\n\n  /**\n   * Setting Workflow-wide defaults that can be used by any task!\n   */\n  \n  return {\n    \"notificationEndpoint\": \"PROTOCOL_PLACEHOLDER://backstage.BASE_DOMAIN_PLACEHOLDER/api/notifications\", // BASE_DOMAIN_PLACEHOLDER\n    \"gitlabEndpoint\": \"PROTOCOL_PLACEHOLDER://gitlab.BASE_DOMAIN_PLACEHOLDER\", // BASE_DOMAIN_PLACEHOLDER\n    \"gitlabToken\": \"GITLAB_PAT_PLACEHOLDER\", // GITLAB_PAT_PLACEHOLDER\n  }  \n}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    },
    "js_process_messages": {
      "name": "js_process_messages",
      "action": "dynatrace.automations:run-javascript",
      "description": "Process the evaluation details to get message details",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { getEnvironmentId, getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\nconst EVALUATION_TASK = 'dql_process_evaluation';\nconst OBJECTIVES_TASK = 'dql_process_objectives';\n\nexport default async function ({ execution_id }) {\n  \n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n\n  // declare new variables to easily access the parameters within this task\n  // const PARAMETER = parameters['PARAMETER'];\n\n  // evaluation query records\n  const evaluation_result = await ex.result(EVALUATION_TASK);\n  const evaluation_record = evaluation_result.records[0];\n\n  // objective query records\n  const objectives_result = await ex.result(OBJECTIVES_TASK);\n  const objectives_record = objectives_result.records;\n\n  // notify boolean flag\n  const notify = evaluation_record['notify'];\n\n  // message for backstage notification, summary info only\n  const backstage_message = \"Dynatrace Site Reliability Guardian evaluation completed for '\" + evaluation_record['context.component_name'] + \"'.  \" +\n                            \"Guardian '\" + evaluation_record['guardian.name'] + \"' \" +\n                            \"completed with a status of '\" + evaluation_record['validation.status'] + \"'. \" +\n                            \"See more details here: \" + getEnvironmentUrl() + \"/ui/apps/dynatrace.site.reliability.guardian/analysis/\" + evaluation_record['guardian.id'] + \"?validationId=\" + evaluation_record['validation.id'];\n  \n  const backstage_channel = evaluation_record['context.owner'];\n\n  // message for gitlab merge request note\n  const gitlab_project = evaluation_record['context.component_name'] + \"-cd\";\n\n  const gitlab_message = backstage_message;\n  \n  return {\n    notify: notify,\n    backstage_message: backstage_message,\n    backstage_channel: backstage_channel,\n    gitlab_project: gitlab_project,\n    gitlab_message: gitlab_message,\n  }\n}"
      },
      "position": {
        "x": 0,
        "y": 4
      },
      "predecessors": [
        "dql_process_evaluation",
        "dql_process_objectives"
      ],
      "conditions": {
        "states": {
          "dql_process_evaluation": "SUCCESS",
          "dql_process_objectives": "SUCCESS"
        },
        "custom": "{{ result(\"dql_process_evaluation\")[\"records\"] | length > 0 }}"
      }
    },
    "js_merge_request_note": {
      "name": "js_merge_request_note",
      "action": "dynatrace.automations:run-javascript",
      "description": "Placeholder for merge request note",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\nconst MERGE_REQUESTS_TASK = 'gitlab_list_merge_requests';\n\nexport default async function ({ execution_id }) {\n  \n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n\n  // declare new variables to easily access the parameters within this task\n  // const PARAMETER = parameters['PARAMETER'];\n\n  // merge requests for project\n  const merge_requests_result = await ex.result(MERGE_REQUESTS_TASK);\n  const merge_request = merge_requests_result['mergeRequests'][0];\n  \n  return {\n    gitlab_project_id: merge_request['project_id'],\n    gitlab_merge_request_id: merge_request['iid'],\n    gitlab_merge_request_sha: merge_request['sha'],\n  }\n  \n}"
      },
      "position": {
        "x": 1,
        "y": 8
      },
      "predecessors": [
        "gitlab_list_merge_requests"
      ],
      "conditions": {
        "states": {
          "gitlab_list_merge_requests": "SUCCESS"
        },
        "custom": "{{ result(\"gitlab_list_merge_requests\")[\"mergeRequests\"] | length > 0 }}"
      }
    },
    "dql_process_evaluation": {
      "name": "dql_process_evaluation",
      "action": "dynatrace.automations:execute-dql-query",
      "description": "Query and process the evaluation event with DQL",
      "input": {
        "query": "fetch bizevents, from: now()-60m\n| filter event.id == \"{{ event()['event.id']}}\"\n| filter event.provider == \"dynatrace.site.reliability.guardian\" and event.type == \"guardian.validation.finished\" and matchesPhrase(guardian.tags,\"notify\") and matchesPhrase(guardian.tags,\"proj_name\") and matchesPhrase(guardian.tags,\"stage\") and matchesPhrase(guardian.tags,\"owner\")\n| filter matchesPhrase(guardian.tags,\"notify\") and matchesPhrase(guardian.tags,\"proj_name\") and matchesPhrase(guardian.tags,\"stage\") and matchesPhrase(guardian.tags,\"owner\")\n| parse execution_context, \"JSON:context\"\n| parse validation.summary, \"JSON:summary\"\n| parse guardian.tags, \"JSON:tags\"\n| fieldsFlatten context\n| fieldsFlatten summary\n| fieldsAdd notify = toBoolean(tags[notify])\n| fields event.id, guardian.id, guardian.name, validation.status, validation.id, validation.workflow.id, validation.workflow.execution.id, context.buildId, context.owner, context.stage, context.proj_name, context.app_name, context.component_name, context.id, summary.pass, summary.warning, summary.fail, summary.error, summary.info, notify"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "js_set_parameters"
      ],
      "conditions": {
        "states": {
          "js_set_parameters": "SUCCESS"
        }
      },
      "waitBefore": 30
    },
    "dql_process_objectives": {
      "name": "dql_process_objectives",
      "action": "dynatrace.automations:execute-dql-query",
      "description": "Query and process the objective events with DQL",
      "input": {
        "query": "fetch bizevents, from: now()-120m\n| filter event.provider == \"dynatrace.site.reliability.guardian\" and event.type == \"guardian.validation.objective\"\n| filter validation.id == \"{{ event()[\"validation.id\"] }}\"\n| parse guardian.objective, \"JSON:objective\"\n| fieldsFlatten objective\n| fields validation.id, event.id, name = objective.name, operator = objective.comparisonOperator, target = objective.target, warning = objective.warning, status = objective.status, value = objective.value"
      },
      "position": {
        "x": -1,
        "y": 3
      },
      "predecessors": [
        "dql_process_evaluation"
      ],
      "conditions": {
        "states": {
          "dql_process_evaluation": "SUCCESS"
        }
      }
    },
    "update_merge_request_1": {
      "name": "update_merge_request_1",
      "action": "dynatrace.automations:http-function",
      "description": "Issue an HTTP request to any API",
      "input": {
        "url": "{{ result(\"js_set_parameters\")['gitlabEndpoint'] }}/api/v4/projects/{{result(\"js_merge_request_note\")['gitlab_project_id']}}/merge_requests/{{result(\"js_merge_request_note\")['gitlab_merge_request_id']}}/notes?body={{result(\"js_process_messages\")['gitlab_message']}}",
        "method": "POST",
        "headers": {
          "PRIVATE-TOKEN": "{{ result(\"js_set_parameters\")['gitlabToken'] }}"
        },
        "payload": "",
        "failOnResponseCodes": "400-599"
      },
      "position": {
        "x": 1,
        "y": 9
      },
      "predecessors": [
        "js_merge_request_note"
      ],
      "conditions": {
        "states": {
          "js_merge_request_note": "OK"
        }
      }
    },
    "gitlab_list_merge_requests": {
      "name": "gitlab_list_merge_requests",
      "action": "dynatrace.gitlab.connector:gitlab-list-merge-requests",
      "description": "List merge requests for GitLab Project",
      "input": {
        "state": "merged",
        "authorId": "",
        "projectId": "{{ result(\"js_get_project_id\")['gitlab_project_id'] }}",
        "connection": "GITLAB_CONNECTION_PLACEHOLDER"
      },
      "active": true,
      "position": {
        "x": 1,
        "y": 7
      },
      "predecessors": [
        "js_get_project_id"
      ],
      "conditions": {
        "states": {
          "js_get_project_id": "SUCCESS"
        }
      }
    },
    "http_notify_backstage_eval": {
      "name": "http_notify_backstage_eval",
      "action": "dynatrace.automations:http-function",
      "description": "Send SRG evaluation details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")['notificationEndpoint'] }}",
        "method": "POST",
        "payload": "{\n  \"message\": \"{{ result(\"js_process_messages\")['backstage_message'] }}\",\n  \"channel\": \"{{ result(\"js_process_messages\")['backstage_channel'] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}",
        "failOnResponseCodes": "400-599"
      },
      "active": true,
      "position": {
        "x": -1,
        "y": 5
      },
      "predecessors": [
        "js_process_messages"
      ],
      "conditions": {
        "states": {
          "js_process_messages": "SUCCESS"
        },
        "custom": "{{ result(\"js_process_messages\")['notify'] == true and result(\"js_process_messages\")['backstage_channel'] is defined and result(\"js_process_messages\")['backstage_message'] is defined }}"
      }
    }
  },
  "description": "This workflow triggers on SRG validation events and sends notifications to Backstage and GitLab",
  "ownerType": "USER",
  "isPrivate": false,
  "trigger": {
    "eventTrigger": {
      "isActive": true,
      "filterQuery": "event.provider == \"dynatrace.site.reliability.guardian\" and event.type == \"guardian.validation.finished\" and matchesPhrase(guardian.tags,\"notify\") and matchesPhrase(guardian.tags,\"proj_name\") and matchesPhrase(guardian.tags,\"stage\") and matchesPhrase(guardian.tags,\"owner\")",
      "uniqueExpression": null,
      "triggerConfiguration": {
        "type": "event",
        "value": {
          "query": "event.provider == \"dynatrace.site.reliability.guardian\" and event.type == \"guardian.validation.finished\" and matchesPhrase(guardian.tags,\"notify\") and matchesPhrase(guardian.tags,\"proj_name\") and matchesPhrase(guardian.tags,\"stage\") and matchesPhrase(guardian.tags,\"owner\")",
          "eventType": "bizevents"
        }
      }
    }
  },
  "schemaVersion": 3,
  "type": "STANDARD"
}