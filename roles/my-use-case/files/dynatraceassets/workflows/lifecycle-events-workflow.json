{
  "id": "76e01b90-0000-44c6-a070-6948616ff328",
  "title": "Lifecycle Events Workflow - HotDay",
  "tasks": {
    "js_set_parameters": {
      "name": "js_set_parameters",
      "action": "dynatrace.automations:run-javascript",
      "description": "Set Workflow-wide defaults that can be used by any task",
      "input": {
        "script": "import { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\nexport default async function ({ execution_id }) {\n\n  /**\n   * Setting Workflow-wide defaults that can be used by any task!\n   */\n  \n  return {\n    \"environmentUrl\": getEnvironmentUrl(),\n    \"notificationEndpoint\": \"PROTOCOL_PLACEHOLDER://backstage.BASE_DOMAIN_PLACEHOLDER/api/notifications\",\n    \"sdlc_event_token\": \"DT_EVENT_INGEST_TOKEN_PLACEHOLDER\",\n  }  \n}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    },
    "js_validate_entity": {
      "name": "js_validate_entity",
      "action": "dynatrace.automations:run-javascript",
      "description": "Query deployment entity and validate that it is observed with Dynatrace",
      "input": {
        "script": "/*\n* This function will fetch the EntityID of the Process Group that has the release, product, stage and ownership information\n*\n* Here is a reference sync.finished event and all the metadata\n{\n  \"timestamp\": \"2023-12-01T06:50:56.376000000Z\",\n  \"app_name\": \"simplenodeservice-team46\",  // thats the product\n  \"argocd\": \"https://argo.xxxxx\",\n  \"event.id\": \"1b81bbde-07ca-4dd2-8c03-482611c6fd7a\",\n  \"event.kind\": \"BIZ_EVENT\",\n  \"event.provider\": \"argocd\",\n  \"event.type\": \"sync.finished\",\n  \"git\": \"https://gitlab.xxxx\",\n  \"owner\": \"team46\", // thats owner\n  \"proj_name\": \"simplenodeservice\",\n  \"result\": \"success\",\n  \"stage\": \"preprod\"  // thats stage\n}\n*/\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n  const ex = await execution(execution_id);\n  const eventContext = ex.event();\n  const timeout = 10;\n\n  console.log(`Query entities for owner ${eventContext.owner}`)\n  const query = `fetch dt.entity.process_group\n    | parse toString(tags), \"\"\"LD '[Kubernetes]dt.owner:' LD:owner ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_VERSION:' LD:version ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_PRODUCT:' LD:product ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_STAGE:' LD:stage ( '\", ' | '\"]')\"\"\"\n    | filter contains(product,\"${eventContext.app_name}\") \n    | filter contains(stage,\"${eventContext.stage}\")`;\n\n  console.log(query);\n\n  // Query entities that have matching team name\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  // if no results returned throw error\n  if(response.result.records == null || response.result.records.length == 0) {\n    throw new Error(`No Entity returned yet with ${eventContext.owner}`)\n  }\n\n  // otherwise return result\n  return response.result.records[0]\n}"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "js_set_parameters"
      ],
      "conditions": {
        "states": {
          "js_set_parameters": "OK"
        },
        "custom": "{{ event()[\"event.type\"] == \"sync.finished\" }}",
        "else": "STOP"
      },
      "retry": {
        "count": 10,
        "delay": 60,
        "failedLoopIterationsOnly": true
      }
    },
    "http_notify_backstage": {
      "name": "http_notify_backstage",
      "action": "dynatrace.automations:http-function",
      "description": "Send event details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Detected {{ event()[\"event.type\"] }} for {{event()[\"app_name\"] }}\",\n  \"channel\": \"{{event()[\"owner\"] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": 1,
        "y": 2
      },
      "predecessors": [
        "js_set_parameters"
      ],
      "conditions": {
        "states": {
          "js_set_parameters": "OK"
        }
      }
    },
    "js_send_dt_failed_events": {
      "name": "js_send_dt_failed_events",
      "action": "dynatrace.automations:run-javascript",
      "description": "Sends Dynatrace SDLC Event for this failed deployment",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const ex = await execution(execution_id);\n  const eventContext = ex.event();\n\n    // construct a \"fake\" buildID -> should come from the CI System\n  const now = new Date();\n  let hour = now.getHours()\n  let minute = now.getMinutes();\n  let day = now.getDate();\n  let month = now.getMonth()\n  var buildId = month + \".\" + day + \".\" + hour + \".\" + minute\n\n  // Creates a BizEvent\n  var bizEventDeploymentReady = {\n    'git' : eventContext.git,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext[\"event.id\"],\n    'event.type': 'deployment.validated',\n    'status' : 'failed',\n    'event.provider': 'Lifecycle Events Workflow',\n    'timeframe.from': 'now-30m',\n    'timeframe.to': 'now',   \n    execution_context: {\n      buildId: buildId,\n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name + \"-\" + eventContext.stage,      \n      id: crypto.randomUUID().toString()\n    } \n  }\n  const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(bizEventDeploymentReady),\n  });\n\n  // Send an SDLC Event\n  var sdlcEventDeploymentReady = {\n    'git' : eventContext.git,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext[\"event.id\"],\n    'entityId' : validateResult.id,\n    'event.type': 'deployment.validated',\n    'status' : 'succeeded',    \n    'event.provider': 'Lifecycle Events Workflow',\n    execution_context: {\n      buildId: buildId,\n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name + \"-\" + eventContext.stage,\n      id: crypto.randomUUID().toString()\n    }     \n  }\n  \n  console.log(sdlcEventDeploymentReady);\n  \n  const resultSDLCEvent = await fetch('/platform/ingest/v1/events.sdlc', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(sdlcEventDeploymentReady)\n  });\n  \n  return { triggeredBy: ex.trigger };\n}"
      },
      "position": {
        "x": -2,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "NOK"
        }
      }
    },
    "http_notify_backstage_err": {
      "name": "http_notify_backstage_err",
      "action": "dynatrace.automations:http-function",
      "description": "Send deployment error details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Dynatrace Observability FAILED for for {{event()[\"app_name\"] }}\",\n  \"channel\": \"{{event()[\"owner\"] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": -1,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "NOK"
        }
      }
    },
    "http_notify_backstage_rdy": {
      "name": "http_notify_backstage_rdy",
      "action": "dynatrace.automations:http-function",
      "description": "Send deployment ready details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Dynatrace Observability Ready for service {{ result(\"js_validate_entity\")[\"entity.name\"] }}: {{ result(\"js_set_parameters\")[\"environmentUrl\"]}}ui/apps/dynatrace.classic.technologies/#processgroupdetails;id={{ result(\"js_validate_entity\")[\"id\"] }} \",\n  \"channel\": \"{{event()[\"owner\"] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": 1,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "OK"
        }
      }
    },
    "js_send_dt_success_events": {
      "name": "js_send_dt_success_events",
      "action": "dynatrace.automations:run-javascript",
      "description": "Sends Dynatrace SDLC Event and Deployment Event for this finished deployment",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nconst PARAMETERS_TASK = \"js_set_parameters\";\n//const dt_api_token = \"dt0c01.*";\n\nexport default async function ({ execution_id }) {\n  \n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // declare new variables to easily access the parameters within this task\n  const sdlc_event_token = parameters['sdlc_event_token'];\n  // event trigger context\n  const eventContext = ex.event();\n  // previous task result\n  const validateResult = await ex.result(\"js_validate_entity\");\n\n  // construct a \"fake\" buildID -> should come from the CI System\n  const now = new Date();\n  let hour = now.getHours();\n  let minute = now.getMinutes();\n  let day = now.getDate();\n  let month = now.getMonth();\n  var buildId = month + \".\" + day + \".\" + hour + \".\" + minute;\n\n  console.log(\"validateResult:\");\n  console.log(validateResult);\n  \n  // Creates a BizEvent\n  var bizEventPayload = {\n    'git' : eventContext.git,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext[\"event.id\"],\n    'entityId' : validateResult.id,\n    'event.type': 'deployment.validated',\n    'status' : 'succeeded',    \n    'event.provider': 'Lifecycle Events Workflow',\n    execution_context: {\n      buildId: buildId,\n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name + \"-\" + eventContext.stage,\n      id: crypto.randomUUID().toString()\n    }     \n  }\n\n  console.log(\"bizEventPayload: \");\n  console.log(bizEventPayload);\n  \n  const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(bizEventPayload),\n  });\n\n  console.log(\"Status: \" + resultBizEvent.status);\n\n  // Send an SDLC Event\n  var sdlcEventPayload = {\n    'git' : eventContext.git,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext[\"event.id\"],\n    'entityId' : validateResult.id,\n    'event.type': 'deployment.validated',\n    'status' : 'succeeded',    \n    'event.provider': 'Lifecycle Events Workflow',\n    'event.kind': 'SDLC_EVENT',\n    execution_context: {\n      buildId: buildId,\n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name + \"-\" + eventContext.stage,\n      id: crypto.randomUUID().toString()\n    }     \n  }\n  \n  console.log(\"sdlcEventPayload: \");\n  console.log(sdlcEventPayload);\n  \n  const sdlc_ingest_url = 'https://' + getEnvironmentId() + '.live.dynatrace.com/platform/ingest/v1/events.sdlc';\n  const resultSDLCEvent = await fetch(sdlc_ingest_url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', 'Authorization': 'Api-Token ' + sdlc_event_token },\n    body: JSON.stringify(sdlcEventPayload)\n  });\n\n  console.log(\"Status: \" + resultSDLCEvent.status);\n  \n  // Send a Deployment Event\n  var deploymentEventPayload = {\n    \"eventType\" : \"CUSTOM_DEPLOYMENT\",\n    \"title\": `Deployment Validated: ${eventContext.app_name}`,\n    \"entitySelector\": `type(PROCESS_GROUP_INSTANCE),tag([Kubernetes]app.kubernetes.io/part-of:${eventContext.app_name}),tag([Kubernetes]dynatrace-release-stage:${eventContext.stage})`,\n    \"properties\": {\n      \"source\" : \"Dynatrace Argo Sync Validator\",\n      'git' : eventContext.git,\n      'owner' : eventContext.owner,\n      'argocd' : eventContext.argocd,\n      'app_name' : eventContext.app_name,\n      'stage' : eventContext.stage,\n      'proj_name' : eventContext.proj_name,\n      'syncFinishedTimestamp' : eventContext.timestamp,\n      'syncFinishedEventId' : eventContext[\"event.id\"],\n      'buildId' : buildId\n    }\n  }\n\n  console.log(\"deploymentEventPayload: \");\n  console.log(deploymentEventPayload);\n  \n  const resultDeploymentEvent = await fetch('/platform/classic/environment-api/v2/events/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(deploymentEventPayload),\n  });\n\n  console.log(\"Status: \" + resultDeploymentEvent.status);\n  \n  return { \n    BizEventPayload: bizEventPayload,\n    BizEventResult: resultBizEvent.status,\n    SdlcEventPayload: sdlcEventPayload,\n    SdlcEventResult: resultSDLCEvent.status,\n    DeploymentEventPayload: deploymentEventPayload,\n    DeploymentEventResult: resultDeploymentEvent.status\n  };\n}"
      },
      "position": {
        "x": 0,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "OK"
        }
      }
    }
  },
  "description": "This workflow sends notifications back to ArgoCD Notifications Plugin when a new BizEvent is received from Argo",
  "actor": "0ae5b378-af4c-4920-8f33-b33cdd8ba3ed",
  "owner": "0ae5b378-af4c-4920-8f33-b33cdd8ba3ed",
  "ownerType": "USER",
  "isPrivate": false,
  "trigger": {
    "eventTrigger": {
      "isActive": true,
      "filterQuery": "event.provider == \"argocd\"",
      "uniqueExpression": null,
      "triggerConfiguration": {
        "type": "event",
        "value": {
          "query": "event.provider == \"argocd\"",
          "eventType": "bizevents"
        }
      }
    }
  },
  "schemaVersion": 3
}
