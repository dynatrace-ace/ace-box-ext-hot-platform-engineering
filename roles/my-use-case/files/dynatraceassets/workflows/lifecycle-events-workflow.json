{
  "id": "17e16273-5775-47c5-a4ff-eac717ef70a4",
  "title": "Lifecycle Events Workflow",
  "tasks": {
    "js_set_parameters": {
      "name": "js_set_parameters",
      "action": "dynatrace.automations:run-javascript",
      "description": "Set Workflow-wide defaults that can be used by any task",
      "input": {
        "script": "export default async function ({ execution_id }) {\n\n  /**\n   * Setting Workflow-wide defaults that can be used by any task!\n   */\n  \n  return {\n    \"notificationEndpoint\": \"PROTOCOL_PLACEHOLDER://backstage.BASE_DOMAIN_PLACEHOLDER/api/notifications\", // BASE_DOMAIN_PLACEHOLDER\n    \"sdlc_event_token\": \"DT_EVENT_INGEST_TOKEN_PLACEHOLDER\", // DT_EVENT_INGEST_TOKEN_PLACEHOLDER\n  }  \n}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    },
    "dql_process_event": {
      "name": "dql_process_event",
      "action": "dynatrace.automations:execute-dql-query",
      "description": "Process the Event with DQL query",
      "input": {
        "query": "fetch events, from: now()-60m\n| filter event.id == \"{{ event()['event.id'] }}\"\n| filter event.kind == \"SDLC_EVENT\" and source == \"ArgoCD\" and isNotNull(action)\n| parse app_name, \"LD:proj_name '-' LD:owner '-' LD:stage '-cd'\"\n| fields app_name, proj_name, owner, stage, action, repo_url, target_url, event.id, source, event.kind"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "js_set_parameters"
      ],
      "conditions": {
        "states": {
          "js_set_parameters": "SUCCESS"
        }
      }
    },
    "js_validate_entity": {
      "name": "js_validate_entity",
      "action": "dynatrace.automations:run-javascript",
      "description": "Query deployment entity and validate that it is observed with Dynatrace",
      "input": {
        "script": "/*\n* This function will fetch the entity of the Kubernetes deployment and pods\n*\n* Here is a reference sync.finished event and all the metadata\n{\n  \"app_name\": \"simplenodeservice-team02-dev-cd\",\n  \"proj_name\": \"simplenodeservice\",\n  \"owner\": \"team02\",\n  \"stage\": \"dev\",\n  \"action\": \"app-deployed\",\n  \"repo_url\": \"http://gitlab.2057afb5-b393-4716-8686-a87c48993782.dynatrace.training/group1/simplenodeservice-team02-dev-cd.git\",\n  \"event.id\": \"9dc989bcd8f249ca925779d4cd230d65c10ec6d4\",\n  \"source\": \"ArgoCD\",\n  \"event.kind\": \"SDLC_EVENT\"\n}\n*/\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\nconst EVENT_TASK = 'dql_process_event';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  \n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // declare new variables to easily access the parameters within this task\n  // const PARAMETER = parameters['PARAMETER'];\n  \n  // event context\n  const eventContext = ex.event();\n  // processed event record\n  const event_result = await ex.result(EVENT_TASK);\n  const event_record = event_result.records[0];\n  \n  const timeout = 10;\n  console.log(\"Query entities for owner: \" + event_record['owner']);\n\n  /* process group query -- deprecated\n  const query = `fetch dt.entity.process_group\n    | parse toString(tags), \"\"\"LD '[Kubernetes]dt.owner:' LD:owner ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_VERSION:' LD:version ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_PRODUCT:' LD:product ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_STAGE:' LD:stage ( '\", ' | '\"]')\"\"\"\n    | filter contains(product,\"${eventContext.app_name}\") \n    | filter contains(stage,\"${eventContext.stage}\")`;\n  */\n\n  // pod (cloud_application_instance) query\n  const query = 'fetch dt.entity.cloud_application_instance \\\n                | fields entity.name, id, component = cloudApplicationLabels[`backstage.io/component`], runningContainersCount, desiredContainersCount, `dt.entity.cloud_application` = instance_of[`dt.entity.cloud_application`] \\\n                | filter contains(component,\"' + event_record['proj_name'] + '\") and contains(component,\"' + event_record['owner'] + '\") and contains(component,\"' + event_record['stage'] + '\") \\\n                | fieldsAdd ready = if(runningContainersCount == desiredContainersCount, true, else: false) \\\n                | filter ready \\\n                | fieldsAdd workload_id = dt.entity.cloud_application \\\n                | fieldsAdd workload_name = entityName(dt.entity.cloud_application) \\\n                | summarize {podCount = count(), podNames = collectDistinct(entity.name), podIds = collectDistinct(id)}, by: {component, workload_id, workload_name, ready}'\n\n  console.log(query);\n\n  // Query entities that have matching team name\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  // if no results returned throw error\n  if(response.result.records == null || response.result.records.length == 0) {\n    throw new Error(\"No entity found for: \" + event_record['app_name']);\n  }\n\n  // otherwise return result\n  return response.result.records[0]\n}"
      },
      "active": true,
      "position": {
        "x": 0,
        "y": 3
      },
      "predecessors": [
        "dql_process_event"
      ],
      "conditions": {
        "states": {
          "dql_process_event": "SUCCESS"
        },
        "custom": "{{ result(\"dql_process_event\")['records'][0]['action'] == \"app-deployed\" }}",
        "else": "STOP"
      },
      "retry": {
        "count": 10,
        "delay": 60,
        "failedLoopIterationsOnly": true
      }
    },
    "http_notify_backstage": {
      "name": "http_notify_backstage",
      "action": "dynatrace.automations:http-function",
      "description": "Send event details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Detected {{ result(\"dql_process_event\")['records'][0]['action'] }} SDLC event for {{ result(\"dql_process_event\")['records'][0]['app_name'] }}\",\n  \"channel\": \"{{ result(\"dql_process_event\")['records'][0]['owner'] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": 1,
        "y": 3
      },
      "predecessors": [
        "dql_process_event"
      ],
      "conditions": {
        "states": {
          "dql_process_event": "SUCCESS"
        },
        "custom": "{{ result(\"dql_process_event\")['records'][0]['owner']  is defined }}"
      }
    },
    "js_send_dt_failed_events": {
      "name": "js_send_dt_failed_events",
      "action": "dynatrace.automations:run-javascript",
      "description": "Sends Dynatrace SDLC Event for this failed deployment",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nconst PARAMETERS_TASK = \"js_set_parameters\";\nconst EVENT_TASK = \"dql_process_event\";\nconst VALIDATE_TASK = \"js_validate_entity\";\n\nexport default async function ({ execution_id }) {\n  \n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // declare new variables to easily access the parameters within this task\n  const sdlc_event_token = parameters['sdlc_event_token'];\n  // event trigger context\n  const eventContext = ex.event();\n  // previous task result\n  const eventResult = await ex.result(EVENT_TASK);\n  const event_record = eventResult.records[0];\n  const validateResult = await ex.result(VALIDATE_TASK);\n  \n\n  // construct a \"fake\" buildID -> should come from the CI System\n  const now = new Date();\n  let hour = now.getHours();\n  let minute = now.getMinutes();\n  let day = now.getDate();\n  let month = now.getMonth();\n  var buildId = month + \".\" + day + \".\" + hour + \".\" + minute;\n\n  console.log(\"validateResult:\");\n  console.log(validateResult);\n  \n  // Creates a BizEvent\n  var bizEventPayload = {\n    'git' : event_record['repo_url'],\n    'owner' : event_record['owner'],\n    'target_url' : event_record['target_url'],\n    'app_name' : event_record['app_name'],\n    'stage' : event_record['stage'],\n    'proj_name' : event_record['proj_name'],\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext['event.id'],\n    'entityId' : validateResult.workload_id,\n    'entityName' : validateResult.workload_name,\n    'action' : 'app-deployed-confirmed',\n    'event.type' : 'deployment.validated',\n    'status' : 'failed',    \n    'event.provider': 'Lifecycle Events Workflow',\n    'source' : 'dynatrace',\n    execution_context: {\n      buildId: buildId,\n      owner: event_record['owner'],\n      stage: event_record['stage'],\n      proj_name: event_record['proj_name'],\n      app_name: event_record['app_name'],\n      component_name: event_record['app_name'] + \"-\" + event_record['stage'],\n      id: crypto.randomUUID().toString()\n    }     \n  }\n\n  console.log(\"bizEventPayload: \");\n  console.log(bizEventPayload);\n  \n  const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(bizEventPayload),\n  });\n\n  console.log(\"Status: \" + resultBizEvent.status);\n\n  // Send an SDLC Event\n  var sdlcEventPayload = {\n    'git' : event_record['repo_url'],\n    'owner' : event_record['owner'],\n    'target_url' : event_record['target_url'],\n    'app_name' : event_record['app_name'],\n    'stage' : event_record['stage'],\n    'proj_name' : event_record['proj_name'],\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext['event.id'],\n    'entityId' : validateResult.workload_id,\n    'entityName' : validateResult.workload_name,\n    'action' : 'app-deployed-confirmed',\n    'event.type' : 'deployment.validated',\n    'status' : 'failed',    \n    'event.provider': 'Lifecycle Events Workflow',\n    'source' : 'dynatrace',\n    execution_context: {\n      buildId: buildId,\n      owner: event_record['owner'],\n      stage: event_record['stage'],\n      proj_name: event_record['proj_name'],\n      app_name: event_record['app_name'],\n      component_name: event_record['app_name'] + \"-\" + event_record['stage'],\n      id: crypto.randomUUID().toString()\n    }     \n  }\n  \n  console.log(\"sdlcEventPayload: \");\n  console.log(sdlcEventPayload);\n  \n  const sdlc_ingest_url = 'https://' + getEnvironmentId() + '.live.dynatrace.com/platform/ingest/v1/events.sdlc';\n  const resultSDLCEvent = await fetch(sdlc_ingest_url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', 'Authorization': 'Api-Token ' + sdlc_event_token },\n    body: JSON.stringify(sdlcEventPayload)\n  });\n\n  console.log(\"Status: \" + resultSDLCEvent.status);\n  \n  return { \n    BizEventPayload: bizEventPayload,\n    BizEventResult: resultBizEvent.status,\n    SdlcEventPayload: sdlcEventPayload,\n    SdlcEventResult: resultSDLCEvent.status,\n  };\n}"
      },
      "position": {
        "x": -2,
        "y": 4
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "NOK"
        }
      }
    },
    "http_notify_backstage_err": {
      "name": "http_notify_backstage_err",
      "action": "dynatrace.automations:http-function",
      "description": "Send deployment error details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Dynatrace Observability FAILED for {{ result(\"dql_process_event\")['records'][0]['app_name'] }}\",\n  \"channel\": \"{{ result(\"dql_process_event\")['records'][0]['owner'] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": -1,
        "y": 4
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "NOK"
        }
      }
    },
    "http_notify_backstage_rdy": {
      "name": "http_notify_backstage_rdy",
      "action": "dynatrace.automations:http-function",
      "description": "Send deployment ready details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Dynatrace Observability Ready for service {{ result(\"js_validate_entity\")[\"workload_name\"] }}: {{ environment().url }}/ui/apps/dynatrace.kubernetes/resources/workload?entityId={{ result(\"js_validate_entity\")[\"workload_id\"] }} \",\n  \"channel\": \"{{ result(\"dql_process_event\")['records'][0]['owner'] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": 1,
        "y": 4
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "SUCCESS"
        }
      }
    },
    "js_send_dt_success_events": {
      "name": "js_send_dt_success_events",
      "action": "dynatrace.automations:run-javascript",
      "description": "Sends Dynatrace SDLC Event and Deployment Event for this finished deployment",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nconst PARAMETERS_TASK = \"js_set_parameters\";\nconst EVENT_TASK = \"dql_process_event\";\nconst VALIDATE_TASK = \"js_validate_entity\";\n\nexport default async function ({ execution_id }) {\n  \n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // declare new variables to easily access the parameters within this task\n  const sdlc_event_token = parameters['sdlc_event_token'];\n  // event trigger context\n  const eventContext = ex.event();\n  // previous task result\n  const eventResult = await ex.result(EVENT_TASK);\n  const event_record = eventResult.records[0];\n  const validateResult = await ex.result(VALIDATE_TASK);\n  \n\n  // construct a \"fake\" buildID -> should come from the CI System\n  const now = new Date();\n  let hour = now.getHours();\n  let minute = now.getMinutes();\n  let day = now.getDate();\n  let month = now.getMonth();\n  var buildId = month + \".\" + day + \".\" + hour + \".\" + minute;\n\n  console.log(\"validateResult:\");\n  console.log(validateResult);\n  \n  // Creates a BizEvent\n  var bizEventPayload = {\n    'git' : event_record['repo_url'],\n    'owner' : event_record['owner'],\n    'target_url' : event_record['target_url'],\n    'app_name' : event_record['app_name'],\n    'stage' : event_record['stage'],\n    'proj_name' : event_record['proj_name'],\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext['event.id'],\n    'entityId' : validateResult.workload_id,\n    'entityName' : validateResult.workload_name,\n    'action' : 'app-deployed-confirmed',\n    'event.type' : 'deployment.validated',\n    'status' : 'succeeded',    \n    'event.provider': 'Lifecycle Events Workflow',\n    'source' : 'dynatrace',\n    execution_context: {\n      buildId: buildId,\n      owner: event_record['owner'],\n      stage: event_record['stage'],\n      proj_name: event_record['proj_name'],\n      app_name: event_record['app_name'],\n      component_name: event_record['app_name'] + \"-\" + event_record['stage'],\n      id: crypto.randomUUID().toString()\n    }     \n  }\n\n  console.log(\"bizEventPayload: \");\n  console.log(bizEventPayload);\n  \n  const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(bizEventPayload),\n  });\n\n  console.log(\"Status: \" + resultBizEvent.status);\n\n  // Send an SDLC Event\n  var sdlcEventPayload = {\n    'git' : event_record['repo_url'],\n    'owner' : event_record['owner'],\n    'target_url' : event_record['target_url'],\n    'app_name' : event_record['app_name'],\n    'stage' : event_record['stage'],\n    'proj_name' : event_record['proj_name'],\n    'syncFinishedTimestamp' : eventContext.timestamp,\n    'syncFinishedEventId' : eventContext['event.id'],\n    'entityId' : validateResult.workload_id,\n    'entityName' : validateResult.workload_name,\n    'action' : 'app-deployed-confirmed',\n    'event.type' : 'deployment.validated',\n    'status' : 'succeeded',    \n    'event.provider': 'Lifecycle Events Workflow',\n    'source' : 'dynatrace',\n    execution_context: {\n      buildId: buildId,\n      owner: event_record['owner'],\n      stage: event_record['stage'],\n      proj_name: event_record['proj_name'],\n      app_name: event_record['app_name'],\n      component_name: event_record['app_name'] + \"-\" + event_record['stage'],\n      id: crypto.randomUUID().toString()\n    }     \n  }\n  \n  console.log(\"sdlcEventPayload: \");\n  console.log(sdlcEventPayload);\n  \n  const sdlc_ingest_url = 'https://' + getEnvironmentId() + '.live.dynatrace.com/platform/ingest/v1/events.sdlc';\n  const resultSDLCEvent = await fetch(sdlc_ingest_url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', 'Authorization': 'Api-Token ' + sdlc_event_token },\n    body: JSON.stringify(sdlcEventPayload)\n  });\n\n  console.log(\"Status: \" + resultSDLCEvent.status);\n  \n  // Send a Deployment Event - Process Group Instances\n  var deploymentEventPGIPayload = {\n    \"eventType\" : \"CUSTOM_DEPLOYMENT\",\n    \"title\": \"Deployment Validated: \" + event_record['app_name'],\n    \"entitySelector\": \"type(PROCESS_GROUP_INSTANCE),tag([Kubernetes]app.kubernetes.io/part-of:\" + event_record['proj_name'] + \"-\" + event_record['owner'] + \"),tag([Kubernetes]dynatrace-release-stage: \" + event_record['stage'] + \")\",\n    \"properties\": {\n      \"source\" : \"Dynatrace Argo Sync Validator\",\n      'git' : event_record['repo_url'],\n      'owner' : event_record['owner'],\n      'target_url' : event_record['target_url'],\n      'app_name' : event_record['app_name'],\n      'stage' : event_record['stage'],\n      'proj_name' : event_record['proj_name'],\n      'syncFinishedTimestamp' : eventContext.timestamp,\n      'syncFinishedEventId' : eventContext['event.id'],\n      'buildId' : buildId\n    }\n  }\n\n  console.log(\"deploymentEventPGIPayload: \");\n  console.log(deploymentEventPGIPayload);\n  \n  const resultDeploymentEventPGI = await fetch('/platform/classic/environment-api/v2/events/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(deploymentEventPGIPayload),\n  });\n\n  console.log(\"Status: \" + resultDeploymentEventPGI.status);\n\n  // Send a Deployment Event - Pod (Cloud Application Instance)\n  var deploymentEventCAIPayload = {\n    \"eventType\" : \"CUSTOM_DEPLOYMENT\",\n    \"title\": \"Deployment Validated: \" + event_record['app_name'],\n    \"entitySelector\": \"type(CLOUD_APPLICATION_INSTANCE),cloudApplicationLabels(backstage.io/component:\" + validateResult['component'] + \")\",\n    \"properties\": {\n      \"source\" : \"Dynatrace Argo Sync Validator\",\n      'git' : event_record['repo_url'],\n      'owner' : event_record['owner'],\n      'target_url' : event_record['target_url'],\n      'app_name' : event_record['app_name'],\n      'stage' : event_record['stage'],\n      'proj_name' : event_record['proj_name'],\n      'syncFinishedTimestamp' : eventContext.timestamp,\n      'syncFinishedEventId' : eventContext['event.id'],\n      'buildId' : buildId\n    }\n  }\n\n  console.log(\"deploymentEventCAIPayload: \");\n  console.log(deploymentEventCAIPayload);\n  \n  const resultDeploymentEventCAI = await fetch('/platform/classic/environment-api/v2/events/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(deploymentEventCAIPayload),\n  });\n\n  console.log(\"Status: \" + resultDeploymentEventCAI.status);\n\n  // Send a Deployment Event - Workload (Cloud Application)\n  var deploymentEventCAPayload = {\n    \"eventType\" : \"CUSTOM_DEPLOYMENT\",\n    \"title\": \"Deployment Validated: \" + event_record['app_name'],\n    \"entitySelector\": \"type(CLOUD_APPLICATION),cloudApplicationLabels(backstage.io/component:\" + validateResult['component'] + \")\",\n    \"properties\": {\n      \"source\" : \"Dynatrace Argo Sync Validator\",\n      'git' : event_record['repo_url'],\n      'owner' : event_record['owner'],\n      'target_url' : event_record['target_url'],\n      'app_name' : event_record['app_name'],\n      'stage' : event_record['stage'],\n      'proj_name' : event_record['proj_name'],\n      'syncFinishedTimestamp' : eventContext.timestamp,\n      'syncFinishedEventId' : eventContext['event.id'],\n      'buildId' : buildId\n    }\n  }\n\n  console.log(\"deploymentEventCAPayload: \");\n  console.log(deploymentEventCAPayload);\n  \n  const resultDeploymentEventCA = await fetch('/platform/classic/environment-api/v2/events/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(deploymentEventCAPayload),\n  });\n\n  console.log(\"Status: \" + resultDeploymentEventCA.status);\n  \n  return { \n    BizEventPayload: bizEventPayload,\n    BizEventResult: resultBizEvent.status,\n    SdlcEventPayload: sdlcEventPayload,\n    SdlcEventResult: resultSDLCEvent.status,\n    DeploymentEventPGIPayload: deploymentEventPGIPayload,\n    DeploymentEventPGIResult: resultDeploymentEventPGI.status,\n    DeploymentEventCAIPayload: deploymentEventCAIPayload,\n    DeploymentEventCAIResult: resultDeploymentEventCAI.status,\n    DeploymentEventCAPayload: deploymentEventCAPayload,\n    DeploymentEventCAResult: resultDeploymentEventCA.status\n  };\n}"
      },
      "position": {
        "x": 0,
        "y": 4
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "SUCCESS"
        }
      }
    }
  },
  "description": "This workflow sends notifications back to ArgoCD Notifications Plugin when a new BizEvent is received from Argo",
  "actor": "059d4958-03d3-4bde-a676-e9cf7f926421",
  "owner": "059d4958-03d3-4bde-a676-e9cf7f926421",
  "ownerType": "USER",
  "isPrivate": false,
  "trigger": {
    "eventTrigger": {
      "isActive": true,
      "filterQuery": "event.kind == \"SDLC_EVENT\" and source == \"ArgoCD\" and isNotNull(action)",
      "uniqueExpression": null,
      "triggerConfiguration": {
        "type": "event",
        "value": {
          "query": "event.kind == \"SDLC_EVENT\" and source == \"ArgoCD\" and isNotNull(action)",
          "eventType": "events"
        }
      }
    }
  },
  "schemaVersion": 3,
  "type": "STANDARD"
}
