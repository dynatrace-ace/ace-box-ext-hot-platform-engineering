{
  "id": "17e16273-5775-47c5-a4ff-eac717ef70a4",
  "title": "Lifecycle Events Workflow",
  "tasks": {
    "js_set_parameters": {
      "name": "js_set_parameters",
      "action": "dynatrace.automations:run-javascript",
      "description": "Set Workflow-wide defaults that can be used by any task",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n\n  const ex = await execution(execution_id);\n  const eventContext = ex.event();\n  // parse commit_url from the event and remove the .git\n  var git_url = eventContext.commit_url.replace(\".git\",\"\");\n  \n  /**\n   * Setting Workflow-wide defaults that can be used by any task!\n   */\n  \n  return {\n    \"notificationEndpoint\": \"http://backstage.1577af03-863d-4cae-a2c9-f4073dd9adbd.dynatrace.training/api/notifications\", // 1577af03-863d-4cae-a2c9-f4073dd9adbd.dynatrace.training\n    \"sdlc_event_token\": \"dt0c01.7KAF2YHEPGQLOOTRSKTNYYQB.ZGUEOOZBZ3ZPTB3KASHW4KUNOOKAR2SSVC3CBMCPO6SNZIHHYFQIENCX4TQHFS3T\", // dt0c01.7KAF2YHEPGQLOOTRSKTNYYQB.ZGUEOOZBZ3ZPTB3KASHW4KUNOOKAR2SSVC3CBMCPO6SNZIHHYFQIENCX4TQHFS3T\n    \"git_url\": git_url,\n  }  \n}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    },
    "js_validate_entity": {
      "name": "js_validate_entity",
      "action": "dynatrace.automations:run-javascript",
      "description": "Query deployment entity and validate that it is observed with Dynatrace",
      "input": {
        "script": "/*\n* This function will fetch the EntityID of the Process Group that has the release, product, stage and ownership information\n*\n* Here is a reference sync.finished event and all the metadata\n{\n  \"timestamp\": \"2023-12-01T06:50:56.376000000Z\",\n  \"app_name\": \"simplenodeservice-team46\",  // thats the product\n  \"argocd\": \"https://argo.xxxxx\",\n  \"event.id\": \"1b81bbde-07ca-4dd2-8c03-482611c6fd7a\",\n  \"event.kind\": \"BIZ_EVENT\",\n  \"event.provider\": \"argocd\",\n  \"event.type\": \"sync.finished\",\n  \"git\": \"https://gitlab.xxxx\",\n  \"owner\": \"team46\", // thats owner\n  \"proj_name\": \"simplenodeservice\",\n  \"result\": \"success\",\n  \"stage\": \"preprod\"  // thats stage\n}\n*/\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n  const ex = await execution(execution_id);\n  const eventContext = ex.event();\n  const timeout = 10;\n\n  console.log(`Query entities for owner ${eventContext.owner}`)\n\n  /* process group query -- deprecated\n  const query = `fetch dt.entity.process_group\n    | parse toString(tags), \"\"\"LD '[Kubernetes]dt.owner:' LD:owner ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_VERSION:' LD:version ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_PRODUCT:' LD:product ( '\", ' | '\"]')\"\"\"\n    | parse toString(tags), \"\"\"LD '[Environment]DT_RELEASE_STAGE:' LD:stage ( '\", ' | '\"]')\"\"\"\n    | filter contains(product,\"${eventContext.app_name}\") \n    | filter contains(stage,\"${eventContext.stage}\")`;\n  */\n\n  // pod (cloud_application_instance) query\n  const query = 'fetch dt.entity.cloud_application_instance \\\n                | fields entity.name, id, component = cloudApplicationLabels[`backstage.io/component`], runningContainersCount, desiredContainersCount, `dt.entity.cloud_application` = instance_of[`dt.entity.cloud_application`] \\\n                | filter contains(component,\"' + eventContext['app_name'] + '\") and contains(component,\"' + eventContext['stage'] + '\") \\\n                | fieldsAdd ready = if(runningContainersCount == desiredContainersCount, true, else: false) \\\n                | filter ready \\\n                | fieldsAdd workload_id = dt.entity.cloud_application \\\n                | fieldsAdd workload_name = entityName(dt.entity.cloud_application) \\\n                | summarize {podCount = count(), podNames = collectDistinct(entity.name), podIds = collectDistinct(id)}, by: {component, workload_id, workload_name, ready}'\n\n  console.log(query);\n\n  // Query entities that have matching team name\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  // if no results returned throw error\n  if(response.result.records == null || response.result.records.length == 0) {\n    throw new Error(`No Entity returned yet with ${eventContext.owner}`)\n  }\n\n  // otherwise return result\n  return response.result.records[0]\n}"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "js_set_parameters"
      ],
      "conditions": {
        "states": {
          "js_set_parameters": "SUCCESS"
        },
        "custom": "{{ event()['event.type'] == \"app-deployed\" }}",
        "else": "STOP"
      },
      "retry": {
        "count": 10,
        "delay": 60,
        "failedLoopIterationsOnly": true
      }
    },
    "http_notify_backstage": {
      "name": "http_notify_backstage",
      "action": "dynatrace.automations:http-function",
      "description": "Send event details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Detected {{ event()[\"event.type\"] }} for {{event()[\"app_name\"] }} ({{event()[\"stage\"] }}:{{event()[\"version\"] }})\",\n  \"channel\": \"{{event()[\"owner\"] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": 1,
        "y": 2
      },
      "predecessors": [
        "js_set_parameters"
      ],
      "conditions": {
        "states": {
          "js_set_parameters": "SUCCESS"
        },
        "custom": "{{ result(\"js_set_parameters\")['notificationEndpoint'] is defined }}"
      }
    },
    "js_send_dt_failed_events": {
      "name": "js_send_dt_failed_events",
      "action": "dynatrace.automations:run-javascript",
      "description": "Sends Dynatrace SDLC Event for this failed deployment",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nconst PARAMETERS_TASK = \"js_set_parameters\";\n\nexport default async function ({ execution_id }) {\n  \n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // declare new variables to easily access the parameters within this task\n  const sdlc_event_token = parameters['sdlc_event_token'];\n  const git_url = parameters['git_url'];\n  // event trigger context\n  const eventContext = ex.event();\n  // previous task result\n  const validateResult = await ex.result(\"js_validate_entity\");\n\n  // construct a \"fake\" buildID -> should come from the CI System\n  const now = new Date();\n  let hour = now.getHours();\n  let minute = now.getMinutes();\n  let day = now.getDate();\n  let month = now.getMonth();\n  var buildId = month + \".\" + day + \".\" + hour + \".\" + minute;\n\n  console.log(\"validateResult:\");\n  console.log(validateResult);\n  \n  // Creates a BizEvent\n  var bizEventPayload = {\n    'git' : git_url,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'source_event.timestamp' : eventContext.timestamp,\n    'source_event.id' : eventContext['event.id'],\n    'source_event.type' : eventContext['event.type'],\n    'entity.id' : validateResult.workload_id,\n    'entity.name' : validateResult.workload_name,\n    'dt.source_entity' : validateResult.workload_id,\n    'event.type': 'app-deployed.validated',\n    'status' : 'failed',\n    'event.provider': 'lifecycle-events-workflow',\n    execution_context: {\n      buildId: buildId,\n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name,\n      id: crypto.randomUUID().toString()\n    }     \n  }\n\n  console.log(\"bizEventPayload: \");\n  console.log(bizEventPayload);\n  \n  const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(bizEventPayload),\n  });\n\n  console.log(\"Status: \" + resultBizEvent.status);\n\n  // Send an SDLC Event\n   var sdlcEventPayload = {\n    'git' : git_url,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'version' : eventContext.version,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'source_event.timestamp' : eventContext.timestamp,\n    'source_event.id' : eventContext['event.id'],\n    'source_event.type' : eventContext['event.type'],\n    'entity.id' : validateResult.workload_id,\n    'entity.name' : validateResult.workload_name,\n    'dt.source_entity' : validateResult.workload_id,\n    'event.provider': 'lifecycle-events-workflow',\n    'event.type': 'app-deployed.validated',\n    \"event.category\": \"task\",\n    'event.kind': 'SDLC_EVENT',\n    'event.status' : \"failed\",\n    'status' : 'failed',\n    \"commit_url\": eventContext.commit_url, \n    \"targetNamespace\": eventContext.targetNamespace,\n    \"target_url\": eventContext.target_url,\n    \"deployment.externalURL\": eventContext['deployment.externalURL'],\n    \"vcs.repository.ref.name\": eventContext['vcs.repository.ref.name'],\n    \"vcs.repository.url.full\": eventContext['vcs.repository.url.full'],\n    \"deployment.release_stage\": eventContext['deployment.release_stage'],\n    \"deployment.release_product\": eventContext['deployment.release_product'],\n    \"deployment.release_version\": eventContext['deployment.release_version'],\n    \"vcs.repository.ref.revision\": eventContext['vcs.repository.ref.revision'],\n    execution_context: {\n      buildId: buildId,\n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name,\n      id: crypto.randomUUID().toString()\n    }     \n  }      \n  \n  console.log(\"sdlcEventPayload: \");\n  console.log(sdlcEventPayload);\n  \n  const sdlc_ingest_url = 'https://' + getEnvironmentId() + '.live.dynatrace.com/platform/ingest/v1/events.sdlc';\n  const resultSDLCEvent = await fetch(sdlc_ingest_url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', 'Authorization': 'Api-Token ' + sdlc_event_token },\n    body: JSON.stringify(sdlcEventPayload)\n  });\n\n  console.log(\"Status: \" + resultSDLCEvent.status);\n  \n  return { \n    BizEventPayload: bizEventPayload,\n    BizEventResult: resultBizEvent.status,\n    SdlcEventPayload: sdlcEventPayload,\n    SdlcEventResult: resultSDLCEvent.status,\n  };\n}"
      },
      "position": {
        "x": -2,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "NOK"
        }
      }
    },
    "http_notify_backstage_err": {
      "name": "http_notify_backstage_err",
      "action": "dynatrace.automations:http-function",
      "description": "Send deployment error details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Dynatrace Observability FAILED for {{event()[\"app_name\"] }} ({{event()[\"stage\"] }}:{{event()[\"version\"] }})\",\n  \"channel\": \"{{event()[\"owner\"] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": -1,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "NOK"
        },
        "custom": "{{ result(\"js_set_parameters\")['notificationEndpoint'] is defined }}"
      }
    },
    "http_notify_backstage_rdy": {
      "name": "http_notify_backstage_rdy",
      "action": "dynatrace.automations:http-function",
      "description": "Send deployment ready details to Backstage Notifications",
      "input": {
        "url": "{{ result(\"js_set_parameters\")[\"notificationEndpoint\"]}}",
        "method": "POST",
        "payload": "{\n  \"message\": \"Dynatrace Observability Ready for service {{ result(\"js_validate_entity\")[\"workload_name\"] }} ({{event()[\"stage\"] }}:{{event()[\"version\"] }}): {{ environment().url }}/ui/apps/dynatrace.kubernetes/resources/workload?entityId={{ result(\"js_validate_entity\")[\"workload_id\"] }} \",\n  \"channel\": \"{{ event()[\"owner\"] }}\",\n  \"origin\": \"Dynatrace Workflow\"\n}"
      },
      "position": {
        "x": 1,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "SUCCESS"
        },
        "custom": "{{ result(\"js_validate_entity\")['ready'] and result(\"js_set_parameters\")['notificationEndpoint'] is defined }}"
      }
    },
    "js_send_dt_success_events": {
      "name": "js_send_dt_success_events",
      "action": "dynatrace.automations:run-javascript",
      "description": "Sends Dynatrace SDLC Event and Deployment Event for this finished deployment",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\n\nconst PARAMETERS_TASK = \"js_set_parameters\";\n\nexport default async function ({ execution_id }) {\n  \n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // declare new variables to easily access the parameters within this task\n  const sdlc_event_token = parameters['sdlc_event_token'];\n  const git_url = parameters['git_url'];\n  // event trigger context\n  const eventContext = ex.event();\n  // previous task result\n  const validateResult = await ex.result(\"js_validate_entity\");\n\n  // construct a \"fake\" buildID -> should come from the CI System\n  const now = new Date();\n  let hour = now.getHours();\n  let minute = now.getMinutes();\n  let day = now.getDate();\n  let month = now.getMonth();\n  var buildId = month + \".\" + day + \".\" + hour + \".\" + minute;\n\n  console.log(\"validateResult:\");\n  console.log(validateResult);\n  \n  // Creates a BizEvent\n  var bizEventPayload = {\n    'git' : git_url,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'source_event.timestamp' : eventContext.timestamp,\n    'source_event.id' : eventContext['event.id'],\n    'source_event.type' : eventContext['event.type'],\n    'entity.id' : validateResult.workload_id,\n    'entity.name' : validateResult.workload_name,\n    'dt.source_entity' : validateResult.workload_id,\n    'event.type': 'app-deployed.validated',\n    'status' : 'succeeded',\n    'event.provider': 'lifecycle-events-workflow',\n    execution_context: {\n      buildId: buildId,\n      version: eventContext.version,\n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name,\n      id: crypto.randomUUID().toString()\n    }     \n  }\n\n  console.log(\"bizEventPayload: \");\n  console.log(bizEventPayload);\n  \n  const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(bizEventPayload),\n  });\n\n  console.log(\"Status: \" + resultBizEvent.status);\n\n  // Send an SDLC Event\n   var sdlcEventPayload = {\n    'git' : git_url,\n    'owner' : eventContext.owner,\n    'argocd' : eventContext.argocd,\n    'app_name' : eventContext.app_name,\n    'version' : eventContext.version,\n    'stage' : eventContext.stage,\n    'proj_name' : eventContext.proj_name,\n    'source_event.timestamp' : eventContext.timestamp,\n    'source_event.id' : eventContext['event.id'],\n    'source_event.type' : eventContext['event.type'],\n    'entity.id' : validateResult.workload_id,\n    'entity.name' : validateResult.workload_name,\n    'dt.source_entity' : validateResult.workload_id,\n    'event.provider': 'lifecycle-events-workflow',\n    'event.type': 'app-deployed.validated',\n    \"event.category\": \"task\",\n    'event.kind': 'SDLC_EVENT',\n    'event.status' : \"succeeded\",\n    'status' : 'succeeded',\n    \"commit_url\": eventContext.commit_url, \n    \"targetNamespace\": eventContext.targetNamespace,\n    \"target_url\": eventContext.target_url,\n    \"timeframe.from\":\"now()-5m\",\n    \"timeframe.to\":\"now()\",\n    \"deployment.externalURL\": eventContext['deployment.externalURL'],\n    \"vcs.repository.ref.name\": eventContext['vcs.repository.ref.name'],\n    \"vcs.repository.url.full\": eventContext['vcs.repository.url.full'],\n    \"deployment.release_stage\": eventContext['deployment.release_stage'],\n    \"deployment.release_product\": eventContext['deployment.release_product'],\n    \"deployment.release_version\": eventContext['deployment.release_version'],\n    \"vcs.repository.ref.revision\": eventContext['vcs.repository.ref.revision'],\n    execution_context: {\n      buildId: buildId,\n      version: eventContext.version,      \n      owner: eventContext.owner,\n      stage: eventContext.stage,\n      proj_name: eventContext.proj_name,\n      app_name: eventContext.app_name,\n      component_name: eventContext.app_name,\n      id: crypto.randomUUID().toString()\n    }     \n  }    \n  \n  console.log(\"sdlcEventPayload: \");\n  console.log(sdlcEventPayload);\n  \n  const sdlc_ingest_url = 'https://' + getEnvironmentId() + '.live.dynatrace.com/platform/ingest/v1/events.sdlc';\n  const resultSDLCEvent = await fetch(sdlc_ingest_url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', 'Authorization': 'Api-Token ' + sdlc_event_token },\n    body: JSON.stringify(sdlcEventPayload)\n  });\n\n  console.log(\"Status: \" + resultSDLCEvent.status);\n  \n  // Send a Deployment Event - Process Group Instances\n  var deploymentEventPGIPayload = {\n    \"eventType\" : \"CUSTOM_DEPLOYMENT\",\n    \"title\": \"Deployment Validated: \" + eventContext.app_name,\n    \"entitySelector\": \"type(PROCESS_GROUP_INSTANCE),tag([Kubernetes]app.kubernetes.io/part-of:\" + eventContext.app_name + \"),tag([Kubernetes]dynatrace-release-stage:\" + eventContext.stage + \")\",\n    \"properties\": {\n      \"source\" : \"Dynatrace Argo Sync Validator\",\n      'event.provider' : 'lifecycle-events-workflow',\n      'git' : git_url,\n      'owner' : eventContext.owner,\n      'argocd' : eventContext.argocd,\n      'app_name' : eventContext.app_name,\n      'stage' : eventContext.stage,\n      'proj_name' : eventContext.proj_name,\n      'buildId' : buildId,\n      'version': eventContext.version\n    }\n  }\n\n  console.log(\"deploymentEventPGIPayload: \");\n  console.log(deploymentEventPGIPayload);\n  \n  const resultDeploymentEventPGI = await fetch('/platform/classic/environment-api/v2/events/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(deploymentEventPGIPayload),\n  });\n\n  console.log(\"Status: \" + resultDeploymentEventPGI.status);\n\n  // Send a Deployment Event - Pod (Cloud Application Instance)\n  var deploymentEventCAIPayload = {\n    \"eventType\" : \"CUSTOM_DEPLOYMENT\",\n    \"title\": \"Deployment Validated: \" + eventContext.app_name,\n    \"entitySelector\": \"type(CLOUD_APPLICATION_INSTANCE),cloudApplicationLabels(backstage.io/component:\" + validateResult.component + \")\",\n    \"properties\": {\n      \"source\" : \"Dynatrace Argo Sync Validator\",\n      'event.provider' : 'lifecycle-events-workflow',\n      'git' : git_url,\n      'owner' : eventContext.owner,\n      'argocd' : eventContext.argocd,\n      'app_name' : eventContext.app_name,\n      'stage' : eventContext.stage,\n      'proj_name' : eventContext.proj_name,\n      'buildId' : buildId,\n      'version': eventContext.version      \n    }\n  }\n\n  console.log(\"deploymentEventCAIPayload: \");\n  console.log(deploymentEventCAIPayload);\n  \n  const resultDeploymentEventCAI = await fetch('/platform/classic/environment-api/v2/events/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(deploymentEventCAIPayload),\n  });\n\n  console.log(\"Status: \" + resultDeploymentEventCAI.status);\n\n  // Send a Deployment Event - Workload (Cloud Application)\n  var deploymentEventCAPayload = {\n    \"eventType\" : \"CUSTOM_DEPLOYMENT\",\n    \"title\": \"Deployment Validated: \" + eventContext.app_name,\n    \"entitySelector\": \"type(CLOUD_APPLICATION),cloudApplicationLabels(backstage.io/component:\" + validateResult.component + \")\",\n    \"properties\": {\n      \"source\" : \"Dynatrace Argo Sync Validator\",\n      'event.provider' : 'lifecycle-events-workflow',\n      'git' : git_url,\n      'owner' : eventContext.owner,\n      'argocd' : eventContext.argocd,\n      'app_name' : eventContext.app_name,\n      'stage' : eventContext.stage,\n      'proj_name' : eventContext.proj_name,\n      'buildId' : buildId,\n      'version': eventContext.version      \n    }\n  }\n\n  console.log(\"deploymentEventCAPayload: \");\n  console.log(deploymentEventCAPayload);\n  \n  const resultDeploymentEventCA = await fetch('/platform/classic/environment-api/v2/events/ingest', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(deploymentEventCAPayload),\n  });\n\n  console.log(\"Status: \" + resultDeploymentEventCA.status);\n  \n  return { \n    BizEventPayload: bizEventPayload,\n    BizEventResult: resultBizEvent.status,\n    SdlcEventPayload: sdlcEventPayload,\n    SdlcEventResult: resultSDLCEvent.status,\n    DeploymentEventPGIPayload: deploymentEventPGIPayload,\n    DeploymentEventPGIResult: resultDeploymentEventPGI.status,\n    DeploymentEventCAIPayload: deploymentEventCAIPayload,\n    DeploymentEventCAIResult: resultDeploymentEventCAI.status,\n    DeploymentEventCAPayload: deploymentEventCAPayload,\n    DeploymentEventCAResult: resultDeploymentEventCA.status\n  };\n}"
      },
      "position": {
        "x": 0,
        "y": 3
      },
      "predecessors": [
        "js_validate_entity"
      ],
      "conditions": {
        "states": {
          "js_validate_entity": "SUCCESS"
        },
        "custom": "{{ result(\"js_validate_entity\")['ready'] }}"
      }
    }
  },
  "description": "This workflow sends notifications back to ArgoCD Notifications Plugin when a new BizEvent is received from Argo",
  "actor": "0ae5b378-af4c-4920-8f33-b33cdd8ba3ed",
  "owner": "059d4958-03d3-4bde-a676-e9cf7f926421",
  "ownerType": "USER",
  "isPrivate": false,
  "trigger": {
    "eventTrigger": {
      "isActive": true,
      "filterQuery": "event.kind == \"SDLC_EVENT\" and\nmatchesValue(event.provider, \"argocd\") and \nisNotNull(event.type) and \n(isNotNull(owner) and not matchesValue(owner,\"<no value>\") and not matchesValue(owner,\"platform_team\")) and \n(isNotNull(proj_name) and not matchesValue(owner,\"<no value>\")) and \n(isNotNull(stage) and not matchesValue(owner,\"<no value>\"))",
      "uniqueExpression": null,
      "triggerConfiguration": {
        "type": "event",
        "value": {
          "query": "event.kind == \"SDLC_EVENT\" and\nmatchesValue(event.provider, \"argocd\") and \nisNotNull(event.type) and \n(isNotNull(owner) and not matchesValue(owner,\"<no value>\") and not matchesValue(owner,\"platform_team\")) and \n(isNotNull(proj_name) and not matchesValue(owner,\"<no value>\")) and \n(isNotNull(stage) and not matchesValue(owner,\"<no value>\"))",
          "eventType": "events"
        }
      }
    }
  },
  "schemaVersion": 3,
  "type": "STANDARD"
}