{
    "version": "6",
    "defaultTimeframe": {
        "from": "now()-1h",
        "to": "now()"
    },
    "defaultSegments": [],
    "sections": [
        {
            "id": "2d442502-fdec-41ef-a1fe-8c8b1abd1827",
            "type": "markdown",
            "markdown": "## Reference Objectives for Release Validation\n\nThe [Dynatrace Site Reliability Guardian (SRG)](https://docs.dynatrace.com/docs/deliver/site-reliability-guardian) is the go-to capability to automate release and deployment validation especially when integrated into your software delivery and change process! The SRG provides several ready-to-go templates ranging from Four-Golden-Signals, Kubernetes Health all the way to Security Gates!\n\n![](https://github.com/dynatrace-ace/ace-box-ext-hot-platform-engineering/blob/main/lab-guide/assets/images/04_00_goal_automated_release_validation.png?raw=true)\n\nIn this Notebook find a list of DQL (Dynatrace Query Language) queries that are a good reference and best practice to use to validate the success of deployments across various dimensions of health: \n- infrastructure: pod availability\n- service: performance, availability, error logs, throughput\n- synthetics: availability\n\nThe DQL Queries are parameterized and can be copy/pasted into Objectives of a Site Reliability Guardian (SRG). The SRG needs to have the following variables configured:\n- `proj_name`: e.g: simplenodeservcie\n- `owner`: e.g: team01\n- `stage`: e.g: preprod\n\nThose variables are used as filters in the different DQL queries, e.g: those pods with a backstage.io/component label following the pattern: `default.$proj_name-$owner-$stage`\n\nFind a brief explanation of every DQL Query, how it filters and what the values mean can be found below!\n\n---\n*Workflow Execution*\n\nAs you will be building a workflow as well you can use the following event filter:\n```\nmatchesValue(event.kind,\"SDLC_EVENT\") and \nmatchesValue(event.type,\"app-deployed.validated\") and\nmatchesValue(owner,\"teamXX\") and\nmatchesValue(proj_name,\"simplenodeservice\") and\nmatchesValue(stage,\"preprod\")\n```"
        },
        {
            "id": "8074680e-1062-4e70-9872-e2254393a823",
            "type": "markdown",
            "markdown": "#### pod availability\nCalculates the ratio between the desired and active pods for the identified workload.\n\nFilter: Workloads with the label `backstage.io/component` == `default.default.$proj_name-$owner-$stage`\n\nIdeally this ratio is always 100% as this would mean that ALL pods that should be running are actively running. A value below 100% would indicate that k8s cannot deploy all requested pods. During a rollout this number will slightly dip below 100% while k8s deploys new requested pods - the number should however always come back to 100%"
        },
        {
            "id": "aecaabdc-e088-4e4f-bdbf-554ebff6dd06",
            "type": "dql",
            "title": "pod availability",
            "filterSegments": [],
            "drilldownPath": [],
            "previousFilterSegments": [],
            "height": 218,
            "state": {
                "input": {
                    "timeframe": {
                        "from": "now()-2h",
                        "to": "now()"
                    },
                    "value": "timeseries {desired = avg(dt.kubernetes.workload.pods_desired), active = avg(dt.kubernetes.pods)}, by: {dt.entity.cloud_application}\n| fieldsAdd labels = entityAttr(dt.entity.cloud_application,\"cloudApplicationLabels\")\n| fieldsAdd component = labels[`backstage.io/component`]\n| filter component == \"default.$proj_name-$owner-$stage\"\n| fieldsAdd sli = (active[]/desired[]) * 100\n| summarize sli = avg(arrayAvg(sli))"
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "gap",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {},
                        "curve": "linear",
                        "pointsDisplay": "auto",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal",
                            "categoryAxisTickLayout": "horizontal",
                            "scale": "absolute",
                            "groupMode": "stacked",
                            "colorPaletteMode": "multi-color",
                            "categoryAxisLabel": "sli",
                            "valueAxisLabel": "sli",
                            "tooltipVariant": "single",
                            "categoryAxis": [
                                "sli"
                            ],
                            "valueAxis": [
                                "sli"
                            ]
                        },
                        "colorPalette": "categorical",
                        "valueRepresentation": "absolute",
                        "truncationMode": "middle",
                        "xAxisScaling": "analyzedTimeframe",
                        "xAxisLabel": "timeframe",
                        "xAxisIsLabelVisible": false,
                        "hiddenLegendFields": [],
                        "leftYAxisSettings": {
                            "isLabelVisible": true,
                            "label": "Kubernetes: Workload - desired pod count â€¢ Kubernetes: Pod count"
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "sli",
                        "prefixIcon": "",
                        "recordField": "sli",
                        "autoscale": true,
                        "alignment": "center",
                        "trend": {
                            "trendType": "auto",
                            "isVisible": true
                        },
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "linewrapEnabled": false,
                        "lineWrapIds": [],
                        "monospacedFontEnabled": false,
                        "monospacedFontColumns": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {},
                        "columnTypeOverrides": []
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "displayedFields": [],
                        "dataMappings": {},
                        "truncationMode": "middle",
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    },
                    "histogram": {
                        "legend": "auto",
                        "yAxis": {
                            "label": "Frequency",
                            "scale": "linear"
                        },
                        "colorPalette": "categorical",
                        "dataMappings": [
                            {
                                "valueAxis": "sli",
                                "rangeAxis": ""
                            }
                        ],
                        "variant": "single",
                        "truncationMode": "middle",
                        "displayedFields": []
                    },
                    "autoSelectVisualization": false
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualization": "singleValue",
                "result": {
                    "code": 200,
                    "value": {
                        "records": [
                            {
                                "sli": 100
                            }
                        ],
                        "metadata": {
                            "grail": {
                                "canonicalQuery": "timeseries by:{dt.entity.cloud_application}, {desired = avg(dt.kubernetes.workload.pods_desired), active = avg(dt.kubernetes.pods)}\n| fieldsAdd labels = entityAttr(dt.entity.cloud_application, \"cloudApplicationLabels\")\n| fieldsAdd component = labels[`backstage.io/component`]\n| filter component == \"default.simplenodeservice-team01-preprod\"\n| fieldsAdd sli = active[] / desired[] * 100\n| summarize sli = avg(arrayAvg(sli))",
                                "timezone": "Europe/Berlin",
                                "query": "timeseries {desired = avg(dt.kubernetes.workload.pods_desired), active = avg(dt.kubernetes.pods)}, by: {dt.entity.cloud_application}\n| fieldsAdd labels = entityAttr(dt.entity.cloud_application,\"cloudApplicationLabels\")\n| fieldsAdd component = labels[`backstage.io/component`]\n| filter component == \"default.simplenodeservice-team01-preprod\"\n| fieldsAdd sli = (active[]/desired[]) * 100\n| summarize sli = avg(arrayAvg(sli))",
                                "scannedRecords": 42,
                                "dqlVersion": "V1_0",
                                "scannedBytes": 0,
                                "scannedDataPoints": 12400,
                                "analysisTimeframe": {
                                    "start": "2025-01-10T07:40:00.000Z",
                                    "end": "2025-01-10T09:41:00.000Z"
                                },
                                "locale": "en-US",
                                "executionTimeMilliseconds": 85,
                                "notifications": [],
                                "queryId": "7d94035b-ad74-4134-aece-ae71003a9439",
                                "sampled": false
                            },
                            "metrics": [
                                {
                                    "metric.key": "dt.kubernetes.workload.pods_desired",
                                    "displayName": "Kubernetes: Workload - desired pod count",
                                    "description": "This metric measures the number of desired pods. The most detailed level of aggregation is workload. The value corresponds to the 'replicas' defined in a deployment resource and to the 'desiredNumberScheduled' for a daemon set resource's status as examp",
                                    "unit": "Count",
                                    "fieldName": "desired"
                                },
                                {
                                    "metric.key": "dt.kubernetes.pods",
                                    "displayName": "Kubernetes: Pod count",
                                    "description": "This metric measures the number of pods. The most detailed level of aggregation is workload and node. The value corresponds to the count of all pods.",
                                    "unit": "Count",
                                    "fieldName": "active"
                                }
                            ]
                        },
                        "types": [
                            {
                                "mappings": {
                                    "sli": {
                                        "type": "double"
                                    }
                                },
                                "indexRange": [
                                    0,
                                    0
                                ]
                            }
                        ]
                    },
                    "notifications": [],
                    "querySettings": {
                        "maxResultRecords": 1000,
                        "defaultScanLimitGbytes": 500,
                        "maxResultMegaBytes": 1,
                        "defaultSamplingRatio": 10,
                        "enableSampling": false
                    },
                    "dateTime": "2025-01-10T09:40:24.542Z",
                    "input": {
                        "timeframe": {
                            "from": "now()-2h",
                            "to": "now()"
                        },
                        "value": "timeseries {desired = avg(dt.kubernetes.workload.pods_desired), active = avg(dt.kubernetes.pods)}, by: {dt.entity.cloud_application}\n| fieldsAdd labels = entityAttr(dt.entity.cloud_application,\"cloudApplicationLabels\")\n| fieldsAdd component = labels[`backstage.io/component`]\n| filter component == \"default.simplenodeservice-team01-preprod\"\n| fieldsAdd sli = (active[]/desired[]) * 100\n| summarize sli = avg(arrayAvg(sli))"
                    }
                },
                "state": "success",
                "davis": {
                    "includeLogs": true,
                    "davisVisualization": {
                        "isAvailable": true
                    }
                }
            }
        },
        {
            "id": "38a5a71f-20b6-4ec6-b271-b1e49f48a085",
            "type": "markdown",
            "markdown": "#### synthetic availability\nCalculates the ratio between the healthy and unhealthy synthetic checks of the synthetic test that is setup for our deployed service. \n\nFilter: Synthetic test based on the following name pattern: `Healthcheck $proj_name-$owner-$stage`. \n\nIdeally this ratio is always 100% as this would mean that the deployed service is always available based on our synthetic tests. This also helps us to validate that during a rolling update the service stays available and doesnt see any intermittent outage. "
        },
        {
            "id": "6383d15a-ce22-41ce-9caf-bc98c824118b",
            "type": "dql",
            "title": "synthetic availability",
            "filterSegments": [],
            "drilldownPath": [],
            "previousFilterSegments": [],
            "height": 232,
            "state": {
                "input": {
                    "timeframe": {
                        "from": "now()-1h",
                        "to": "now()"
                    },
                    "value": "timeseries {\n  total = sum(dt.synthetic.http.executions, default: 0),\n  pass = sum(dt.synthetic.http.executions, default: 0), filter: { matchesValue(http_monitor.result.status, \"HEALTHY\") }\n  },by: { dt.entity.http_check }\n| fieldsAdd name = entityName(dt.entity.http_check)\n| filter name == \"Healthcheck $proj_name-$owner-$stage\"\n| fieldsAdd sli=(((pass[])/total[])*(100))\n| summarize sli = avg(arrayAvg(sli))"
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "gap",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {},
                        "curve": "linear",
                        "pointsDisplay": "auto",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal",
                            "categoryAxisTickLayout": "horizontal",
                            "scale": "absolute",
                            "groupMode": "stacked",
                            "colorPaletteMode": "multi-color",
                            "categoryAxisLabel": "sli",
                            "valueAxisLabel": "sli",
                            "tooltipVariant": "single",
                            "categoryAxis": [
                                "sli"
                            ],
                            "valueAxis": [
                                "sli"
                            ]
                        },
                        "colorPalette": "categorical",
                        "valueRepresentation": "absolute",
                        "truncationMode": "middle",
                        "xAxisScaling": "analyzedTimeframe",
                        "xAxisLabel": "timeframe",
                        "xAxisIsLabelVisible": false,
                        "hiddenLegendFields": [],
                        "leftYAxisSettings": {
                            "isLabelVisible": true,
                            "label": "Execution count (by status) [HTTP monitor]"
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "sli",
                        "prefixIcon": "",
                        "recordField": "sli",
                        "autoscale": true,
                        "alignment": "center",
                        "trend": {
                            "trendType": "auto",
                            "isVisible": true
                        },
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "linewrapEnabled": false,
                        "lineWrapIds": [],
                        "monospacedFontEnabled": false,
                        "monospacedFontColumns": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {},
                        "columnTypeOverrides": []
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "displayedFields": [],
                        "dataMappings": {},
                        "truncationMode": "middle",
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    },
                    "histogram": {
                        "legend": "auto",
                        "yAxis": {
                            "label": "Frequency",
                            "scale": "linear"
                        },
                        "colorPalette": "categorical",
                        "dataMappings": [
                            {
                                "valueAxis": "sli",
                                "rangeAxis": ""
                            }
                        ],
                        "variant": "single",
                        "truncationMode": "middle",
                        "displayedFields": []
                    },
                    "autoSelectVisualization": false
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualization": "singleValue",
                "result": {
                    "code": 200,
                    "value": {
                        "records": [
                            {
                                "sli": 100
                            }
                        ],
                        "metadata": {
                            "grail": {
                                "canonicalQuery": "timeseries by:{dt.entity.http_check}, filter:matchesValue(http_monitor.result.status, \"HEALTHY\"), {total = sum(dt.synthetic.http.executions, default:0), pass = sum(dt.synthetic.http.executions, default:0)}\n| fieldsAdd name = entityName(dt.entity.http_check)\n| filter name == \"Healthcheck simplenodeservice-team01-preprod\"\n| fieldsAdd sli = pass[] / total[] * 100\n| summarize sli = avg(arrayAvg(sli))",
                                "timezone": "Europe/Berlin",
                                "query": "timeseries {\n  total = sum(dt.synthetic.http.executions, default: 0),\n  pass = sum(dt.synthetic.http.executions, default: 0), filter: { matchesValue(http_monitor.result.status, \"HEALTHY\") }\n  },by: { dt.entity.http_check }\n| fieldsAdd name = entityName(dt.entity.http_check)\n| filter name == \"Healthcheck simplenodeservice-team01-preprod\"\n| fieldsAdd sli=(((pass[])/total[])*(100))\n| summarize sli = avg(arrayAvg(sli))",
                                "scannedRecords": 1,
                                "dqlVersion": "V1_0",
                                "scannedBytes": 0,
                                "scannedDataPoints": 120,
                                "analysisTimeframe": {
                                    "start": "2025-01-10T09:23:00.000Z",
                                    "end": "2025-01-10T10:24:00.000Z"
                                },
                                "locale": "en-US",
                                "executionTimeMilliseconds": 64,
                                "notifications": [],
                                "queryId": "08f2cc81-135b-46c4-8b3e-c815261a35db",
                                "sampled": false
                            },
                            "metrics": [
                                {
                                    "metric.key": "dt.synthetic.http.executions",
                                    "displayName": "Execution count (by status) [HTTP monitor]",
                                    "description": "The number of monitor executions.",
                                    "unit": "count",
                                    "fieldName": "total"
                                },
                                {
                                    "metric.key": "dt.synthetic.http.executions",
                                    "displayName": "Execution count (by status) [HTTP monitor]",
                                    "description": "The number of monitor executions.",
                                    "unit": "count",
                                    "fieldName": "pass"
                                }
                            ]
                        },
                        "types": [
                            {
                                "mappings": {
                                    "sli": {
                                        "type": "double"
                                    }
                                },
                                "indexRange": [
                                    0,
                                    0
                                ]
                            }
                        ]
                    },
                    "notifications": [],
                    "querySettings": {
                        "maxResultRecords": 1000,
                        "defaultScanLimitGbytes": 500,
                        "maxResultMegaBytes": 1,
                        "defaultSamplingRatio": 10,
                        "enableSampling": false
                    },
                    "dateTime": "2025-01-10T10:23:12.177Z",
                    "input": {
                        "timeframe": {
                            "from": "now()-1h",
                            "to": "now()"
                        },
                        "value": "timeseries {\n  total = sum(dt.synthetic.http.executions, default: 0),\n  pass = sum(dt.synthetic.http.executions, default: 0), filter: { matchesValue(http_monitor.result.status, \"HEALTHY\") }\n  },by: { dt.entity.http_check }\n| fieldsAdd name = entityName(dt.entity.http_check)\n| filter name == \"Healthcheck simplenodeservice-team01-preprod\"\n| fieldsAdd sli=(((pass[])/total[])*(100))\n| summarize sli = avg(arrayAvg(sli))"
                    }
                },
                "state": "success",
                "davis": {
                    "includeLogs": true,
                    "davisVisualization": {
                        "isAvailable": true
                    }
                }
            }
        },
        {
            "id": "2f3be9c6-1cc1-4044-8171-26ead05f36eb",
            "type": "markdown",
            "markdown": "#### service performance\nCalculates the ratio of total vs service request where response times are faster than 500ms!\n\nFilter: Services in the k8s namespace matching the pattern: `$proj_name-$owner-$stage`. \n\nIdeally this ratio is always 100% as this means all requests are faster than 500ms. You can adjust the performance threshold in the DQL Query if you want!"
        },
        {
            "id": "3ff28439-51be-4209-aa73-0f60d218e668",
            "type": "dql",
            "title": "service performance",
            "filterSegments": [],
            "drilldownPath": [],
            "previousFilterSegments": [],
            "height": 247,
            "state": {
                "input": {
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    },
                    "value": "timeseries total=avg(dt.service.request.response_time, default: 0), by: { dt.entity.service }, filter: { k8s.namespace.name == \"$proj_name-$owner-$stage\" }\n| fieldsAdd high=iCollectArray(if(total[]> (1000 * 500), total[]))\n| fieldsAdd low=iCollectArray(if(total[]<= (1000 * 500), total[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd sli=100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n| summarize sli = avg(arrayAvg(sli))"
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "gap",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {},
                        "curve": "linear",
                        "pointsDisplay": "auto",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal",
                            "categoryAxisTickLayout": "horizontal",
                            "scale": "absolute",
                            "groupMode": "stacked",
                            "colorPaletteMode": "multi-color"
                        },
                        "colorPalette": "categorical",
                        "valueRepresentation": "absolute",
                        "truncationMode": "middle"
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "sli",
                        "prefixIcon": "",
                        "recordField": "sli",
                        "autoscale": true,
                        "alignment": "center",
                        "trend": {
                            "trendType": "auto",
                            "isVisible": true
                        },
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "linewrapEnabled": false,
                        "lineWrapIds": [],
                        "monospacedFontEnabled": false,
                        "monospacedFontColumns": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {},
                        "columnTypeOverrides": []
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "displayedFields": [],
                        "dataMappings": {},
                        "truncationMode": "middle",
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    },
                    "histogram": {
                        "legend": "auto",
                        "yAxis": {
                            "label": "Frequency",
                            "scale": "linear"
                        },
                        "colorPalette": "categorical",
                        "dataMappings": [
                            {
                                "valueAxis": "sli",
                                "rangeAxis": ""
                            }
                        ],
                        "variant": "single",
                        "truncationMode": "middle",
                        "displayedFields": []
                    },
                    "autoSelectVisualization": false
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualization": "singleValue",
                "result": {
                    "code": 200,
                    "value": {
                        "records": [
                            {
                                "sli": 100
                            }
                        ],
                        "metadata": {
                            "grail": {
                                "canonicalQuery": "timeseries by:{dt.entity.service}, total = avg(dt.service.request.response_time, default:0)\n| fieldsAdd tags = entityAttr(dt.entity.service, \"tags\")\n| filter in(tags, \"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd high = iCollectArray(if(total[] > 1000 * 500, total[]))\n| fieldsAdd low = iCollectArray(if(total[] <= 1000 * 500, total[]))\n| fieldsAdd highRespTimes = iCollectArray(if(isNull(high[]), 0, else:1))\n| fieldsAdd lowRespTimes = iCollectArray(if(isNull(low[]), 0, else:1))\n| fieldsAdd sli = 100 * (lowRespTimes[] / (lowRespTimes[] + highRespTimes[]))\n| fieldsRemove total, high, low, highRespTimes, lowRespTimes\n| summarize sli = avg(arrayAvg(sli))",
                                "timezone": "America/Chicago",
                                "query": "timeseries total=avg(dt.service.request.response_time, default: 0), by: { dt.entity.service }\n| fieldsAdd tags = entityAttr(dt.entity.service,\"tags\")\n| filter in(tags,\"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd high=iCollectArray(if(total[]> (1000 * 500), total[]))\n| fieldsAdd low=iCollectArray(if(total[]<= (1000 * 500), total[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd sli=100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n| fieldsRemove total, high, low, highRespTimes, lowRespTimes\n| summarize sli = avg(arrayAvg(sli))",
                                "scannedRecords": 3,
                                "dqlVersion": "V1_0",
                                "scannedBytes": 0,
                                "scannedDataPoints": 31,
                                "analysisTimeframe": {
                                    "start": "2024-12-09T00:46:00.000Z",
                                    "end": "2024-12-09T01:17:00.000Z"
                                },
                                "locale": "en-US",
                                "executionTimeMilliseconds": 71,
                                "notifications": [],
                                "queryId": "f26f178f-c9e6-47d6-94b2-818cc29a4498",
                                "sampled": false
                            },
                            "metrics": [
                                {
                                    "metric.key": "dt.service.request.response_time",
                                    "fieldName": "total"
                                }
                            ]
                        },
                        "types": [
                            {
                                "mappings": {
                                    "sli": {
                                        "type": "double"
                                    }
                                },
                                "indexRange": [
                                    0,
                                    0
                                ]
                            }
                        ]
                    },
                    "notifications": [],
                    "querySettings": {
                        "maxResultRecords": 1000,
                        "defaultScanLimitGbytes": 500,
                        "maxResultMegaBytes": 1,
                        "defaultSamplingRatio": 10,
                        "enableSampling": false
                    },
                    "dateTime": "2024-12-09T01:16:24.692Z",
                    "input": {
                        "timeframe": {
                            "from": "now()-30m",
                            "to": "now()"
                        },
                        "value": "timeseries total=avg(dt.service.request.response_time, default: 0), by: { dt.entity.service }\n| fieldsAdd tags = entityAttr(dt.entity.service,\"tags\")\n| filter in(tags,\"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd high=iCollectArray(if(total[]> (1000 * 500), total[]))\n| fieldsAdd low=iCollectArray(if(total[]<= (1000 * 500), total[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd sli=100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n| fieldsRemove total, high, low, highRespTimes, lowRespTimes\n| summarize sli = avg(arrayAvg(sli))"
                    }
                },
                "state": "success",
                "davis": {
                    "includeLogs": true,
                    "davisVisualization": {
                        "isAvailable": true
                    }
                }
            }
        },
        {
            "id": "5ce08c6d-9074-4097-a1c6-670996b57251",
            "type": "markdown",
            "markdown": "#### service availability\nCalculates the ratio of total vs service request that fail (e.g: HTTP 500s ...)!\n\nFilter: Services in the k8s namespace matching the pattern: `$proj_name-$owner-$stage`. \n\nIdeally this ratio is always 100% as this means all requests are always returning a successful response!"
        },
        {
            "id": "da2dc654-d803-4e17-8730-6b715f65bf08",
            "type": "dql",
            "title": "service availability",
            "filterSegments": [],
            "drilldownPath": [],
            "previousFilterSegments": [],
            "height": 261,
            "state": {
                "input": {
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    },
                    "value": "timeseries { total=sum(dt.service.request.count, default: 0) ,failures=sum(dt.service.request.failure_count, default: 0) }, by: { dt.entity.service }, filter: { k8s.namespace.name == \"$proj_name-$owner-$stage\" }\n| fieldsAdd sli=(((total[]-failures[])/total[])*(100))\n| summarize sli = avg(arrayAvg(sli))"
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "gap",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {},
                        "curve": "linear",
                        "pointsDisplay": "auto",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal",
                            "categoryAxisTickLayout": "horizontal",
                            "scale": "absolute",
                            "groupMode": "stacked",
                            "colorPaletteMode": "multi-color"
                        },
                        "colorPalette": "categorical",
                        "valueRepresentation": "absolute",
                        "truncationMode": "middle"
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "sli",
                        "prefixIcon": "",
                        "recordField": "sli",
                        "autoscale": true,
                        "alignment": "center",
                        "trend": {
                            "trendType": "auto",
                            "isVisible": true
                        },
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "linewrapEnabled": false,
                        "lineWrapIds": [],
                        "monospacedFontEnabled": false,
                        "monospacedFontColumns": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {},
                        "columnTypeOverrides": []
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "displayedFields": [],
                        "dataMappings": {},
                        "truncationMode": "middle",
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    },
                    "histogram": {
                        "legend": "auto",
                        "yAxis": {
                            "label": "Frequency",
                            "scale": "linear"
                        },
                        "colorPalette": "categorical",
                        "dataMappings": [
                            {
                                "valueAxis": "sli",
                                "rangeAxis": ""
                            }
                        ],
                        "variant": "single",
                        "truncationMode": "middle",
                        "displayedFields": []
                    },
                    "autoSelectVisualization": false
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualization": "singleValue",
                "result": {
                    "code": 200,
                    "value": {
                        "records": [
                            {
                                "sli": 100
                            }
                        ],
                        "metadata": {
                            "grail": {
                                "canonicalQuery": "timeseries by:{dt.entity.service}, {total = sum(dt.service.request.count, default:0), failures = sum(dt.service.request.failure_count, default:0)}\n| fieldsAdd tags = entityAttr(dt.entity.service, \"tags\")\n| filter in(tags, \"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd sli = (total[] - failures[]) / total[] * 100\n| fieldsRemove total, failures\n| summarize sli = avg(arrayAvg(sli))",
                                "timezone": "America/Chicago",
                                "query": "timeseries { total=sum(dt.service.request.count, default: 0) ,failures=sum(dt.service.request.failure_count, default: 0) }, by: { dt.entity.service }\n| fieldsAdd tags = entityAttr(dt.entity.service,\"tags\")\n| filter in(tags,\"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd sli=(((total[]-failures[])/total[])*(100))\n| fieldsRemove total, failures\n| summarize sli = avg(arrayAvg(sli))",
                                "scannedRecords": 3,
                                "dqlVersion": "V1_0",
                                "scannedBytes": 0,
                                "scannedDataPoints": 62,
                                "analysisTimeframe": {
                                    "start": "2024-12-09T00:48:00.000Z",
                                    "end": "2024-12-09T01:19:00.000Z"
                                },
                                "locale": "en-US",
                                "executionTimeMilliseconds": 80,
                                "notifications": [],
                                "queryId": "73e1a6a6-25ad-4ab3-8516-adcfee815f6c",
                                "sampled": false
                            },
                            "metrics": [
                                {
                                    "metric.key": "dt.service.request.count",
                                    "fieldName": "total"
                                },
                                {
                                    "metric.key": "dt.service.request.failure_count",
                                    "fieldName": "failures"
                                }
                            ]
                        },
                        "types": [
                            {
                                "mappings": {
                                    "sli": {
                                        "type": "double"
                                    }
                                },
                                "indexRange": [
                                    0,
                                    0
                                ]
                            }
                        ]
                    },
                    "notifications": [],
                    "querySettings": {
                        "maxResultRecords": 1000,
                        "defaultScanLimitGbytes": 500,
                        "maxResultMegaBytes": 1,
                        "defaultSamplingRatio": 10,
                        "enableSampling": false
                    },
                    "dateTime": "2024-12-09T01:18:54.269Z",
                    "input": {
                        "timeframe": {
                            "from": "now()-30m",
                            "to": "now()"
                        },
                        "value": "timeseries { total=sum(dt.service.request.count, default: 0) ,failures=sum(dt.service.request.failure_count, default: 0) }, by: { dt.entity.service }\n| fieldsAdd tags = entityAttr(dt.entity.service,\"tags\")\n| filter in(tags,\"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd sli=(((total[]-failures[])/total[])*(100))\n| fieldsRemove total, failures\n| summarize sli = avg(arrayAvg(sli))"
                    }
                },
                "state": "success",
                "davis": {
                    "includeLogs": true,
                    "davisVisualization": {
                        "isAvailable": true
                    }
                }
            }
        },
        {
            "id": "134eec97-5f4f-4382-a868-c05eeb1f1c75",
            "type": "markdown",
            "markdown": "#### container logs\nCalculates the ratio of total logs vs logs that have the status ERROR or WARN!\n\nFilter: All logs ingested in the k8s namespace matching the pattern: `$proj_name-$owner-$stage`. \n\nIdeally this ratio is always 100% as this means that we do not have any ERROR or WARN logs. This would especially be interesting after a deployment to see whether any change in log behavior comes in. This objective can also be used with automatic baselining vs a static threshold as applications typically have a certain number of ERROR or WARN. The Auto-Adaptive Baseline feature in SRG can learn and only alert if there is an anomaly!"
        },
        {
            "id": "dcc58f97-b612-4265-b420-5097fbd7a1c4",
            "type": "dql",
            "title": "container logs",
            "filterSegments": [],
            "drilldownPath": [],
            "previousFilterSegments": [],
            "height": 274,
            "state": {
                "input": {
                    "timeframe": {
                        "from": "now()-1h",
                        "to": "now()"
                    },
                    "value": "fetch logs\n| filter k8s.namespace.name == \"$proj_name-$owner-$stage\" and k8s.container.name == \"rollouts-demo\"\n| makeTimeseries {non_info = countIf(in(status,{\"ERROR\",\"WARN\"}), default:0)}\n| fieldsAdd sli = if(non_info[] != 0, 0, else: 1)\n| fieldsAdd sli = (sli[] / 1) * 100\n| summarize sli = avg(arrayAvg(sli))"
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "gap",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {},
                        "curve": "linear",
                        "pointsDisplay": "auto",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal",
                            "categoryAxisTickLayout": "horizontal",
                            "scale": "absolute",
                            "groupMode": "stacked",
                            "colorPaletteMode": "multi-color"
                        },
                        "colorPalette": "categorical",
                        "valueRepresentation": "absolute",
                        "truncationMode": "middle"
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "sli",
                        "prefixIcon": "",
                        "recordField": "sli",
                        "autoscale": true,
                        "alignment": "center",
                        "trend": {
                            "trendType": "auto",
                            "isVisible": true
                        },
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "linewrapEnabled": false,
                        "lineWrapIds": [],
                        "monospacedFontEnabled": false,
                        "monospacedFontColumns": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {},
                        "columnTypeOverrides": []
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "displayedFields": [],
                        "dataMappings": {},
                        "truncationMode": "middle",
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    },
                    "histogram": {
                        "legend": "auto",
                        "yAxis": {
                            "label": "Frequency",
                            "scale": "linear"
                        },
                        "colorPalette": "categorical",
                        "dataMappings": [
                            {
                                "valueAxis": "sli",
                                "rangeAxis": ""
                            }
                        ],
                        "variant": "single",
                        "truncationMode": "middle",
                        "displayedFields": []
                    },
                    "autoSelectVisualization": false
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualization": "singleValue",
                "result": {
                    "code": 200,
                    "value": {
                        "records": [
                            {
                                "sli": 100
                            }
                        ],
                        "metadata": {
                            "grail": {
                                "canonicalQuery": "fetch logs\n| filter k8s.namespace.name == \"simplenodeservice-team01-qa\" AND k8s.container.name == \"rollouts-demo\"\n| makeTimeseries non_info = countIf(in(status, {\"ERROR\", \"WARN\"}), default:0)\n| fieldsAdd sli = if(non_info[] != 0, 0, else:1)\n| fieldsAdd sli = sli[] / 1 * 100\n| fieldsRemove non_info\n| summarize sli = avg(arrayAvg(sli))",
                                "timezone": "America/Chicago",
                                "query": "fetch logs\n| filter k8s.namespace.name == \"simplenodeservice-team01-qa\" and k8s.container.name == \"rollouts-demo\"\n| makeTimeseries {non_info = countIf(in(status,{\"ERROR\",\"WARN\"}), default:0)}\n| fieldsAdd sli = if(non_info[] != 0, 0, else: 1)\n| fieldsAdd sli = (sli[] / 1) * 100\n| fieldsRemove non_info\n| summarize sli = avg(arrayAvg(sli))",
                                "scannedRecords": 423399,
                                "dqlVersion": "V1_0",
                                "scannedBytes": 13236441,
                                "scannedDataPoints": 0,
                                "analysisTimeframe": {
                                    "start": "2024-12-09T21:12:11.843Z",
                                    "end": "2024-12-09T22:12:11.843Z"
                                },
                                "locale": "en-US",
                                "executionTimeMilliseconds": 32,
                                "notifications": [],
                                "queryId": "da0b72e0-0d54-442a-b270-d99e516cb5b1",
                                "sampled": false
                            }
                        },
                        "types": [
                            {
                                "mappings": {
                                    "sli": {
                                        "type": "double"
                                    }
                                },
                                "indexRange": [
                                    0,
                                    0
                                ]
                            }
                        ]
                    },
                    "notifications": [],
                    "querySettings": {
                        "maxResultRecords": 1000,
                        "defaultScanLimitGbytes": 500,
                        "maxResultMegaBytes": 1,
                        "defaultSamplingRatio": 10,
                        "enableSampling": false
                    },
                    "dateTime": "2024-12-09T22:12:12.183Z",
                    "input": {
                        "timeframe": {
                            "from": "now()-1h",
                            "to": "now()"
                        },
                        "value": "fetch logs\n| filter k8s.namespace.name == \"simplenodeservice-team01-qa\" and k8s.container.name == \"rollouts-demo\"\n| makeTimeseries {non_info = countIf(in(status,{\"ERROR\",\"WARN\"}), default:0)}\n| fieldsAdd sli = if(non_info[] != 0, 0, else: 1)\n| fieldsAdd sli = (sli[] / 1) * 100\n| fieldsRemove non_info\n| summarize sli = avg(arrayAvg(sli))"
                    }
                },
                "state": "success",
                "davis": {
                    "includeLogs": true,
                    "davisVisualization": {
                        "isAvailable": true
                    }
                }
            }
        },
        {
            "id": "f35aa188-dbad-4ce6-a8c7-cb60ff9f8f82",
            "type": "markdown",
            "markdown": "#### service throughput\nCalculates the ratio of 1-min timeslots where the service handled active requests\n\nFilter: All services in the k8s namespace matching the pattern: `$proj_name-$owner-$stage`. \n\nIdeally this ratio is always 100% as this means that our service is constantly handling requests. This is especially interesting during an update or a rollout as this metric ensures that the service could always handle traffic even during the time when an update happened. ATTENTION: this only makes sense for services that have constant traffic."
        },
        {
            "id": "58f7c8d1-1591-45e9-a1e8-49cac82a390d",
            "type": "dql",
            "title": "service throughput",
            "filterSegments": [],
            "drilldownPath": [],
            "previousFilterSegments": [],
            "height": 257,
            "state": {
                "input": {
                    "timeframe": {
                        "from": "now()-30m",
                        "to": "now()"
                    },
                    "value": "timeseries {count = sum(dt.service.request.count, default: 0)}, by: {dt.entity.service}, filter: { k8s.namespace.name == \"$proj_name-$owner-$stage\" }\n| fieldsAdd traffic = if(count[] == 0, 0, else: 1)\n| fieldsAdd sli = (traffic[] / 1) * 100\n| summarize sli = avg(arrayAvg(sli))"
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "gap",
                        "circleChartSettings": {
                            "groupingThresholdType": "relative",
                            "groupingThresholdValue": 0,
                            "valueType": "relative"
                        },
                        "categoryOverrides": {},
                        "curve": "linear",
                        "pointsDisplay": "auto",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal",
                            "categoryAxisTickLayout": "horizontal",
                            "scale": "absolute",
                            "groupMode": "stacked",
                            "colorPaletteMode": "multi-color",
                            "categoryAxisLabel": "dt.entity.service",
                            "valueAxisLabel": "interval",
                            "tooltipVariant": "single"
                        },
                        "colorPalette": "categorical",
                        "valueRepresentation": "absolute",
                        "truncationMode": "middle",
                        "xAxisScaling": "analyzedTimeframe",
                        "xAxisLabel": "timeframe",
                        "xAxisIsLabelVisible": false,
                        "hiddenLegendFields": [],
                        "leftYAxisSettings": {}
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "sli",
                        "prefixIcon": "",
                        "recordField": "sli",
                        "autoscale": true,
                        "alignment": "center",
                        "trend": {
                            "trendType": "auto",
                            "isVisible": true
                        },
                        "colorThresholdTarget": "value"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "linewrapEnabled": false,
                        "lineWrapIds": [],
                        "monospacedFontEnabled": false,
                        "monospacedFontColumns": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {},
                        "columnTypeOverrides": []
                    },
                    "honeycomb": {
                        "shape": "hexagon",
                        "legend": {
                            "hidden": false,
                            "position": "auto"
                        },
                        "displayedFields": [],
                        "dataMappings": {},
                        "truncationMode": "middle",
                        "colorMode": "color-palette",
                        "colorPalette": "categorical"
                    },
                    "histogram": {
                        "legend": "auto",
                        "yAxis": {
                            "label": "Frequency",
                            "scale": "linear"
                        },
                        "colorPalette": "categorical",
                        "dataMappings": [
                            {
                                "valueAxis": "sli",
                                "rangeAxis": ""
                            }
                        ],
                        "variant": "single",
                        "truncationMode": "middle",
                        "displayedFields": []
                    },
                    "autoSelectVisualization": false
                },
                "querySettings": {
                    "maxResultRecords": 1000,
                    "defaultScanLimitGbytes": 500,
                    "maxResultMegaBytes": 1,
                    "defaultSamplingRatio": 10,
                    "enableSampling": false
                },
                "visualization": "singleValue",
                "result": {
                    "code": 200,
                    "value": {
                        "records": [
                            {
                                "sli": 70.96774193548387
                            }
                        ],
                        "metadata": {
                            "grail": {
                                "canonicalQuery": "timeseries by:{dt.entity.service}, count = sum(dt.service.request.count, default:0)\n| fieldsAdd tags = entityAttr(dt.entity.service, \"tags\")\n| filter in(tags, \"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd traffic = if(count[] == 0, 0, else:1)\n| fieldsAdd sli = traffic[] / 1 * 100\n| fieldsRemove traffic, count\n| summarize sli = avg(arrayAvg(sli))",
                                "timezone": "America/Chicago",
                                "query": "timeseries {count = sum(dt.service.request.count, default: 0)}, by: {dt.entity.service}\n| fieldsAdd tags = entityAttr(dt.entity.service,\"tags\")\n| filter in(tags,\"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd traffic = if(count[] == 0, 0, else: 1)\n| fieldsAdd sli = (traffic[] / 1) * 100\n| fieldsRemove traffic, count\n| summarize sli = avg(arrayAvg(sli))",
                                "scannedRecords": 3,
                                "dqlVersion": "V1_0",
                                "scannedBytes": 0,
                                "scannedDataPoints": 31,
                                "analysisTimeframe": {
                                    "start": "2024-12-09T00:44:00.000Z",
                                    "end": "2024-12-09T01:15:00.000Z"
                                },
                                "locale": "en-US",
                                "executionTimeMilliseconds": 64,
                                "notifications": [],
                                "queryId": "0e1d908d-b065-4fba-acb5-b6d2e606b1b0",
                                "sampled": false
                            },
                            "metrics": [
                                {
                                    "metric.key": "dt.service.request.count",
                                    "fieldName": "count"
                                }
                            ]
                        },
                        "types": [
                            {
                                "mappings": {
                                    "sli": {
                                        "type": "double"
                                    }
                                },
                                "indexRange": [
                                    0,
                                    0
                                ]
                            }
                        ]
                    },
                    "notifications": [],
                    "querySettings": {
                        "maxResultRecords": 1000,
                        "defaultScanLimitGbytes": 500,
                        "maxResultMegaBytes": 1,
                        "defaultSamplingRatio": 10,
                        "enableSampling": false
                    },
                    "dateTime": "2024-12-09T01:14:58.310Z",
                    "input": {
                        "timeframe": {
                            "from": "now()-30m",
                            "to": "now()"
                        },
                        "value": "timeseries {count = sum(dt.service.request.count, default: 0)}, by: {dt.entity.service}\n| fieldsAdd tags = entityAttr(dt.entity.service,\"tags\")\n| filter in(tags,\"[Kubernetes]backstage.io/component:default.simplenodeservice-team01-qa\")\n| fieldsAdd traffic = if(count[] == 0, 0, else: 1)\n| fieldsAdd sli = (traffic[] / 1) * 100\n| fieldsRemove traffic, count\n| summarize sli = avg(arrayAvg(sli))"
                    }
                },
                "state": "success",
                "davis": {
                    "includeLogs": true,
                    "davisVisualization": {
                        "isAvailable": true
                    }
                }
            }
        },
        {
            "id": "36a9df61-f838-446a-8c30-ea6eb499192d",
            "type": "markdown",
            "markdown": "## Observability Score Validation\n\nWhile its great to allow every team to define their own SRG to validate their own application & service objectives its important to also validate a set of objectives ACROSS ALL deployments.\n\nIf you are a central observability, security, platform or architecture team you want to make sure that after every deployment you have\n- Dynatrace successfully ingest logs, metrics, traces, events ... => otherwise you are flying blind\n- No Security Vulnerabilities ==> you don't want vulnerable code in your environments\n- Ingress works as expected ==> you want to make sure deployed apps are accessible\n\nAs an additional best practice - and to expand on the examples above with the used variables - we can define an SRG to validate all of this. Here are two examples of DQL Queries you can use to validate that Dynatrace ingests logs and metrics:\n\n**Objective**: validate capturing logs\n\n**Description**: Validate that logs are being captured\n```\nfetch logs\n| filter k8s.namespace.name == \"$proj_name-$owner-$stage\" and k8s.container.name == \"rollouts-demo\"\n| summarize count()\n```\n\n**Objective**: validate capturing requests\n\n**Description**: Validates that Dynatrace captured requests\n```\ntimeseries {\n   requestCount=sum(dt.service.request.count)\n}, by:{dt.entity.service}, filter: k8s.namespace.name == \"$proj_name-$owner-$stage\", nonempty: true\n| fields maxCount = arrayMax(requestCount)\n```\n\n\n**Objective**: validate synthetic result\n\n**Description**: Validates that the Synthetic Test executed successful\n```\nfetch dt.synthetic.events\n| filter batch.status == \"Success\"\n| filter event.id == $batchId\n| summarize count()\n```\n\n---\n*Workflow to trigger Synthetics and Guardian*\n\nIf you setup a Workflow you can have that workflow trigger with the following event filter\n```\nmatchesValue(event.kind,\"SDLC_EVENT\") and \nmatchesValue(event.type,\"app-deployed.validated\") and\nisNotNull(owner) and\nisNotNull(proj_name) and\nisNotNull(stage)\n```\n\nThe workflow can then first execute the Synthetic Tests that match the tags\n```\n[\n  \"owner:{{event()['owner']}}\",\n  \"stage:{{event()['stage']}}\",\n  \"proj_name:{{event()['proj_name']}}\"\n]\n```\n\nAnd then execute the Guardian by additionally passing the Synthetic Batch Id as a variable\n```\nbatchId: {{ result(\"execute_synthetic_checks\")[\"event.id\"] }}\n```"
        }
    ]
}
