[{"id":"1","name":"Introduction","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>A Primer to Platform Engineering</p>\n<p><img src=\"assets/01_00_platform_engineering.png\" alt=\"Platform Engineering\" /></p>\n<ul>\n<li>The Problem We Need to Solve</li>\n<li>What is Platform Engineering?</li>\n<li>Internal Development Platforms</li>\n</ul>","activityList":[{"id":"1.1","name":"Problem Statement","content":"<h2 id=\"problemstatement\">Problem Statement</h2>\n<p><img src=\"assets/01_01_problem_statement.png\" alt=\"Problem Statement\" /></p>","activityList":[]},{"id":"1.2","name":"Platform Engineering","content":"<h2 id=\"platformengineering\">Platform Engineering</h2>\n<h3 id=\"whatisplatformengineering\">What is Platform Engineering?</h3>\n<p><img src=\"assets/01_02_what_is_platform_engineering.png\" alt=\"What Is Platform Engineering\" /></p>\n<h3 id=\"platformengineeringinpractice\">Platform Engineering in Practice</h3>\n<p><img src=\"assets/01_02_platform_engineering_in_practice.png\" alt=\"Platform Engineering in Practice\" /></p>","activityList":[]},{"id":"1.3","name":"Internal Development Platforms","content":"<h2 id=\"internaldevelopmentplatforms\">Internal Development Platforms</h2>\n<h3 id=\"junodynatracesinternaldevelopmentplatform\">JUNO - Dynatrace's Internal Development Platform</h3>\n<p><img src=\"assets/01_03_juno_idp.png\" alt=\"JUNO\" /></p>\n<h3 id=\"referencearchitectureidpwithdynatrace\">Reference Architecture - IDP with Dynatrace</h3>\n<p><img src=\"assets/01_03_reference_idp_architecture.png\" alt=\"Reference Architecture\" /></p>","activityList":[]}]},{"id":"2","name":"Explore our Platform","content":"<h2 id=\"exploreourplatform\">Explore our Platform</h2>\n<p><img src=\"assets/02_01_hot_day_environment.png\" alt=\"Our Platform\" /></p>","activityList":[{"id":"2.1","name":"HOT Day Environment","content":"<h2 id=\"hotdayenvironment\">HOT Day Environment</h2>\n<h3 id=\"thehotdayenvironmentwepreparedforyou\">The HOT Day environment we prepared for you</h3>\n<p><img src=\"assets/02_01_hot_day_environment.png\" alt=\"HOT Day Environment\" /></p>\n<h3 id=\"howwebuilttheidp\">How we built the IDP</h3>\n<p><img src=\"assets/02_01_built_the_idp.png\" alt=\"How we built the IDP\" /></p>","activityList":[]},{"id":"2.2","name":"HOT Day Goal","content":"<h2 id=\"hotdaygoal\">HOT Day Goal</h2>\n<h3 id=\"goalofthishotdaysession\">Goal of this HOT Day Session</h3>\n<p><img src=\"assets/02_02_goal_of_HOT_day.png\" alt=\"Goal of HOT Day\" /></p>","activityList":[]},{"id":"2.3","name":"Explore the IDP","content":"<h2 id=\"exploretheidp\">Explore the IDP</h2>\n<h3 id=\"letsexplorethecorepartsofouridp\">Let's explore the core parts of our IDP</h3>\n<p><img src=\"assets/02_03_explore_our_idp.png\" alt=\"Explore IDP\" /></p>\n<p>Dynatrace : <code>https://&lt;ourtenant&gt;.apps.dynatrace.com</code></p>\n<p>Backstage : <code>https://backstage.&lt;ourdomain&gt;.dynatrace.training</code></p>\n<p>GitLab : <code>https://gitlab.&lt;ourdomain&gt;.dynatrace.training</code></p>\n<p>ArgoCD : <code>https://argocd.&lt;ourdomain&gt;.dynatrace.training</code></p>\n<p>You can find these links and the login credentials on the Dynatrace Training Dashboard:</p>\n<p><code>https://dashboard.&lt;ourdomain&gt;.dynatrace.training</code></p>","activityList":[]},{"id":"2.4","name":"Hands-On: Dynatrace","content":"<h2 id=\"handsondynatrace\">Hands-On: Dynatrace</h2>\n<h3 id=\"startwithplatformengineeringlaunchpad\">Start with Platform Engineering Launchpad</h3>\n<p><img src=\"assets/02_04_dynatrace_launchpad.png\" alt=\"Platform Engineering Launchpad\" /></p>\n<h3 id=\"exploreourkubernetescluster\">Explore our Kubernetes Cluster</h3>\n<p><img src=\"assets/02_04_dynatrace_explore_kubernetes.png\" alt=\"Explore Kubernetes\" /></p>\n<h3 id=\"exploreourplatformdashboard\">Explore our Platform Dashboard</h3>\n<p><img src=\"assets/02_04_dynatrace_explore_dashboard.png\" alt=\"Explore Platform Dashboard\" /></p>","activityList":[]},{"id":"2.5","name":"Hands-On: GitLab","content":"<h2 id=\"handsongitlab\">Hands-On: GitLab</h2>\n<h3 id=\"gitlabourcustomappsrepoincludingtemplates\">GitLab: Our custom apps repo including templates</h3>\n<p><img src=\"assets/02_05_gitlab_repo.png\" alt=\"GitLab\" /></p>","activityList":[]},{"id":"2.6","name":"Hands-On: ArgoCD","content":"<h2 id=\"handsonargocd\">Hands-On: ArgoCD</h2>\n<h3 id=\"argocddeployseverythingwehaveingitlab\">ArgoCD: Deploys everything we have in GitLab</h3>\n<p><img src=\"assets/02_06_argocd.png\" alt=\"ArgoCD\" /></p>","activityList":[]},{"id":"2.7","name":"Hands-On: Backstage","content":"<h2 id=\"handsonbackstage\">Hands-On: Backstage</h2>\n<h3 id=\"backstageourdeveloperportalwithservicecatalogforselfserviceonboarding\">Backstage: Our developer portal with service catalog for self-service onboarding</h3>\n<p><img src=\"assets/02_07_backstage.png\" alt=\"Backstage\" /></p>","activityList":[]}]},{"id":"3","name":"Self-Service Onboarding","content":"<h2 id=\"selfserviceonboarding\">Self-Service Onboarding</h2>\n<p>Integrating Dynatrace into your IDPs Golden Paths and observe the lifecycle of onboarded apps</p>\n<h3 id=\"onboardingofanewservice\">Onboarding of a new Service</h3>\n<p><img src=\"assets/03_00_onboarding_new_service.png\" alt=\"Onboarding New Service\" /></p>\n<ul>\n<li>Create a new component with Backstage</li>\n<li>Explore the new repo in GitLab</li>\n<li>Observe the automatic deployment to Kubernetes in ArgoCD</li>\n<li>Explore the newly created app</li>\n<li>Observe the results in Dynatrace</li>\n</ul>","activityList":[{"id":"3.1","name":"Backstage: New Component from Template","content":"<h2 id=\"backstagenewcomponentfromtemplate\">Backstage: New Component from Template</h2>\n<h3 id=\"createnewcomponentfromtemplate\">Create new component from template</h3>\n<p><img src=\"assets/03_01_backstage_new_component.png\" alt=\"Backstage New Component\" /></p>\n<p>Using the links on the Dynatrace Training dashboard, navigate to Backstage in your browser.</p>\n<ol>\n<li><p>Click on <code>Create</code> to create a new component with Backstage.  From the available Templates, locate the <code>Create a new Application</code> Template and click on <code>Choose</code>.</p></li>\n<li><p>Begin creating a new application by selecting a Project.  Choose <code>simplenodservice</code> as the Project.  Click <code>Next</code>.</p></li>\n<li><p>Enter your assigned team identifier, such as <code>team01</code> or <code>team30</code> given by the intructors.  Give your team a name, something unique or simply <code>Team XYZ</code>.  Enter a fake team email address, such as <code>team01@dynatrace.training</code> or <code>team30@dynatrace.training</code> based on your given team identifier.  Emails will not be sent to these addresses as part of this lab.  Click <code>Next</code>.</p></li>\n<li><p>Leave the <code>Application Version</code>, <code>Software Lifecycle Stage</code>, <code>DORA metric tracking enabled</code>, <code>Include Security scans</code>, and <code>Include Dynatrace Configuration</code> at their default values.  Click <code>Review</code>.</p></li>\n<li><p>Verify the information you entered is correct.  Click <code>Create</code> to create your new component.</p></li>\n</ol>","activityList":[]},{"id":"3.2","name":"GitLab: Explore the new Repo","content":"<h2 id=\"gitlabexplorethenewrepo\">GitLab: Explore the new Repo</h2>\n<h3 id=\"letsexplorethecreatedgitlabrepo\">Let's explore the created GitLab repo</h3>\n<p><img src=\"assets/03_02_gitlab_repo.png\" alt=\"GitLab Repo\" /></p>\n<ol>\n<li><p>From the Backstage new component page, locate and click on <code>View on GitLab</code> to open the newly created GitLab repo</p></li>\n<li><p>Browse the different directories created in the new repo</p>\n<ul>\n<li><code>argoapp</code> directory contains the stage, owner, and version details of the application managed by ArgoCD</li>\n<li><code>manifests</code> directory contains the Kubernetes deployment manifests for the application</li>\n<li><code>monaco</code> directory contains the Dynatrace configurations to be deployed automatically via Monaco (Configuration as Code)</li></ul></li>\n</ol>","activityList":[]},{"id":"3.3","name":"ArgoCD: Automatic Deployment to Kubernetes","content":"<h2 id=\"argocdautomaticdeploymenttokubernetes\">ArgoCD: Automatic Deployment to Kubernetes</h2>\n<h3 id=\"newcomponentisautomaticallymanagedbyargocd\">New component is automatically managed by ArgoCD</h3>\n<p><img src=\"assets/03_03_argocd.png\" alt=\"ArgoCD App\" /></p>\n<ol>\n<li><p>From the Backstage new component page, locate and click on <code>View in ArgoCD</code> to open the newly created app in Argo</p></li>\n<li><p>The repo contains an ArgoCD app manifest, allowing Argo to automatically start managing the app</p></li>\n</ol>\n<h3 id=\"itautomaticallysyncedourgitlabrepositorytokubernetes\">It automatically synced our GitLab repository to Kubernetes</h3>\n<p><img src=\"assets/03_03_argocd_sync_k8s.png\" alt=\"ArgoCD Sync\" /></p>\n<p>The application will be synced automatically, Argo will deploy all of the manifests to the Kubernetes cluster.</p>\n<p>Additionally, the Monaco workflow will deploy the supporting Dynatrace configuration items.</p>\n<p>Finally, Keptn lifecycle management provides distributed tracing of the different deployment activities.</p>","activityList":[]},{"id":"3.4","name":"Explore the New App","content":"<h2 id=\"explorethenewapp\">Explore the New App</h2>\n<h3 id=\"browsetothenewlydeployedappsimplenodeservice\">Browse to the newly deployed app - SimpleNodeService</h3>\n<p><img src=\"assets/03_04_explore_new_app.png\" alt=\"Browse App\" /></p>\n<p>From the Backstage component page, locate and click on <code>Browse Application</code> to open the newly created application.</p>\n<p>Clicking on the <code>Echo</code> and <code>Invoke</code> buttons will generate activity and transactions on the new application.</p>","activityList":[]},{"id":"3.5","name":"Dynatrace: Observe the Results","content":"<h2 id=\"dynatraceobservetheresults\">Dynatrace: Observe the Results</h2>\n<h3 id=\"backstageintegrationdirectaccesstodynatracedata\">Backstage Integration: Direct Access to Dynatrace Data</h3>\n<p><img src=\"assets/03_05_backstage_integration.png\" alt=\"Backstage Integration\" /></p>\n<ol>\n<li><p>From the Backstage component page, locate the <code>Kubernetes Deployments</code> section.  This section is populated via a live query of the Dynatrace environment.  Once the Kubernetes deployment for the application is running and observed by Dynatrace, the details will appear here.</p></li>\n<li><p>Under the <code>Workload</code> column, click on the workload name to open the workload in Dynatrace.  Explore the metadata, observability, security, and contextual information captured by Dynatrace automatically.</p></li>\n</ol>\n<h3 id=\"dynatracereleaseawareness\">Dynatrace Release Awareness</h3>\n<p><img src=\"assets/03_05_dt_release_aware_workload.png\" alt=\"Release Awareness on Workflow\" /></p>\n<p>On the <code>Info</code> section of the workload, you'll find details about the application release product, stage, and version.  Additionally, you'll find the team ownership details.  This metadata is automatically picked up from the application manifests.</p>\n<p><img src=\"assets/03_05_dt_release_aware_service.png\" alt=\"Release Awareness on Service\" /></p>\n<p>On the <code>Overview</code> section of the workload, you'll find the Application Observability details.  Click on <code>Go to Services app</code> to view the Service details.  Explore the information captured by Dynatrace OneAgent through distributed tracing and code-level visibility.</p>\n<p><img src=\"assets/03_05_dt_release_aware_trace.png\" alt=\"Release Awareness on Trace\" /></p>\n<p>From the top of the Service details, click on <code>View traces</code> to see the individual transactions captured as distributed traces.  Explore the waterfall details and release context information on each transaction.</p>\n<h3 id=\"dynatracemonacoconfigurationascode\">Dynatrace Monaco (Configuration as Code)</h3>\n<p><img src=\"assets/03_05_argocd_monaco.png\" alt=\"ArgoCD Workflow for Monaco\" /></p>\n<p>From the GitLab repo page, check the manifest <code>workflow-post-sync-apply-monaco.yml</code>.  This contains the details on how Monaco is called to apply configurations for Dynatrace owners, slos, and synthetic monitors.</p>\n<h3 id=\"softwaredeliverylifecycleevents\">Software Delivery Lifecycle Events</h3>\n<p><img src=\"assets/03_05_argocd_lifecycle_events.png\" alt=\"Lifecycle Events with ArgoCD\" /></p>\n<p>TODO</p>\n<p><img src=\"assets/03_05_argocd_notifications_events.png\" alt=\"ArgoCD Notification Events\" /></p>\n<p>From the GitLab <code>platform</code> repo, check the manifest <code>argocd-notifications-cm.yml</code>.  This contains the details on how ArgoCD is sending SDLC events to Dynatrace via webhooks.  These events then trigger the Lifecycle Events Workflow automation in Dynatrace, adding additional SDLC event generation and notifications to Backstage.</p>\n<p><img src=\"assets/03_05_dt_lifecycle_events_workflow.png\" alt=\"Lifecycle Events Workflow\" /></p>\n<p>In the Dynatrace environment, open the Workflows app.  Locate and open the <code>Lifecycle Events Workflow</code>.  Events from ArgoCD trigger this workflow to execute.  This workflow will validate that deployments are successful when they are observed by Dynatrace.</p>\n<p><img src=\"assets/03_05_dt_platform_dashboard.png\" alt=\"Platform Dashboard\" /></p>\n<p>From the Dashboards app or from the Platform Engineering Launchpad, open the <code>Platform Observability Cockpit</code> dashboard.  This dashboard queries the SDLC events and visualizes the various activites for your application's lifecycle.</p>\n<h3 id=\"backstagenotificationsforclosedloopdelivery\">Backstage Notifications for Closed-Loop Delivery</h3>\n<p><img src=\"assets/03_05_backstage_notifications.png\" alt=\"Backstage Notifications\" /></p>\n<p>In Backstage, click on <code>Notifications</code> in the bottom left corner.  Select your team's channel and view the notifications sent from Dynatrace.</p>","activityList":[]},{"id":"3.6","name":"Summary","content":"<h2 id=\"summary\">Summary</h2>\n<h3 id=\"whathavewelearnedsofar\">What have we learned so far</h3>\n<p><img src=\"assets/03_06_what_we_learned.png\" alt=\"Summary\" /></p>","activityList":[]}]},{"id":"4","name":"Release Validation","content":"<h2 id=\"releasevalidation\">Release Validation</h2>\n<p>Using Site Reliability Guardian and Workflows to automate release validation</p>\n<p><img src=\"assets/04_00_extend_release_validation.png\" alt=\"Release Validation\" /></p>\n<ul>\n<li>Introducing Site Reliability Guardian (SRG)</li>\n<li>Create our First SRG</li>\n<li>Run our First SRG Manually</li>\n<li>Automate our SRG Validation</li>\n<li>Summary</li>\n</ul>","activityList":[{"id":"4.1","name":"Site Reliability Guardian","content":"<h2 id=\"sitereliabilityguardian\">Site Reliability Guardian</h2>\n<p><img src=\"assets/04_01_introducing_srg.png\" alt=\"Introducing SRG\" /></p>\n<p>A Dynatrace app that automates release validation to check a newly deployed version's service availability, performance, capacity, and security objectives.</p>\n<p>A Guardian is a collection of defined objectives that are evaluated for a specified timeframe to determine pass, warning, or fail status.  An objective is a means for measuring your services such as performance, availability, and security. You can define an objective for your guardian that is validated on demand or automatically.</p>\n<p>Guardians are attached to Workflow automations, allowing them to be integrated into your software delivery lifecycle.</p>\n<p><img src=\"assets/04_01_best_practices_on_srg.png\" alt=\"Best Practices\" /></p>\n<p>Best Practices</p>\n<p>TODO</p>","activityList":[]},{"id":"4.2","name":"Create our First SRG","content":"<h2 id=\"createourfirstsrg\">Create our First SRG</h2>\n<p>Begin by opening the Site Reliability Guardian App within the Dynatrace environment.</p>\n<h3 id=\"tagsfororganizationandautomation\">Tags for organization and automation</h3>\n<p><img src=\"assets/04_02_srg_tags.png\" alt=\"SRG Tags\" /></p>\n<ol>\n<li><p>Click on <code>+ Guardian</code> to create a new Guardian</p></li>\n<li><p>SRG provides some great templates to get you started, but today we'll choose <code>Create without template</code></p></li>\n<li><p>Give the Guardian a name, the same as the deployed app name.  Enter a description, such as <code>release validation for our deployment</code>.  To integrate the Guardian into the lifecycle on our IDP, specify the following tags:</p>\n<ul>\n<li>owner = the owner of the deployed app</li>\n<li>proj_name = the project of the deployed app</li>\n<li>stage = the stage of the deployed app</li>\n<li>notify = true</li></ul></li>\n</ol>\n<h3 id=\"variablesfordynamicdqlqueriesinourobjectives\">Variables for dynamic DQL queries in our objectives</h3>\n<p><img src=\"assets/04_02_srg_variables.png\" alt=\"SRG Variables\" /></p>\n<ol>\n<li><p>Next to the Guardian name, click the <code>...</code> button and choose <code>Variables</code></p></li>\n<li><p>Specify the variable <code>name</code> and variable <code>value</code>, then click <code>Add</code></p></li>\n<li><p>Create the following variables:</p>\n<ul>\n<li>owner = the owner of the deployed app</li>\n<li>proj_name = the project of the deployed app</li>\n<li>stage = the stage of the deployed app</li></ul></li>\n<li><p>Click on the <code>+</code> button to Add new objective to the Guardian</p></li>\n</ol>\n<h3 id=\"usedqlqueriesfromournotebookasyourobjectives\">Use DQL queries from our Notebook as your objectives</h3>\n<p><img src=\"assets/04_02_srg_objectives_notebook.png\" alt=\"SRG Objectives Notebook\" /></p>\n<p>Open the Notebooks App and find the Notebook titled <code>SRG Objectives</code>.  This Notebook contains the DQL queries that can be copied and pasted into the Guardian's objectives.  These queries include the variables that were defined in the previous step.</p>\n<h3 id=\"defineanobjectivewithdqlandstaticthresholds\">Define an objective with DQL and static thresholds</h3>\n<p><img src=\"assets/04_02_srg_pod_availability.png\" alt=\"SRG DQL Objective\" /></p>\n<ol>\n<li><p>Give the objective a name.  Guardian objectives support DQL queries and Classic SLO metrics.  Choose <code>Grail using DQL</code>.  Paste the query from the Notebook into the <code>DQL Query</code> field.  Optionally, you can test the query manually from this screen.  If the query fails, that's OK; it's likely that the deployment needs more time to generate data for that objective.</p></li>\n<li><p>In the <code>Define thresholds</code> section, choose <code>Static thresholds</code>.  Our queries are all structured so that 100 is perfect and 0 is problematic.  Choose <code>A higher value is good for my result</code> with a <code>Fails if result &lt; 98</code> and <code>Warns if result &lt; 99</code></p></li>\n<li><p>Click on <code>Save</code> to save the Guardian and the objective.</p></li>\n</ol>\n<h3 id=\"optionallyaddtheremainingdqlobjectives\">(optionally) Add the remaining DQL objectives</h3>\n<p><img src=\"assets/04_02_srg_additional_objectives.png\" alt=\"SRG Objectives\" /></p>\n<p>Guardians require at least 1 objective.  Time permitting, complete the Guardian by adding the remaining 5 objectives, for a total of 6.</p>","activityList":[]},{"id":"4.3","name":"Run our First SRG Manually","content":"<h2 id=\"runourfirstsrgmanually\">Run our First SRG Manually</h2>\n<p>Guardians can be executed manually on-demand or through a Workflow automation.</p>\n<h3 id=\"manuallywithondemandvalidation\">Manually with On-Demand Validation</h3>\n<p><img src=\"assets/04_03_srg_manual_validation.png\" alt=\"SRG Manual Validatioin\" /></p>\n<p>Open your Guardian and locate the <code>Validate</code> button in the top right corner.  Click it and choose <code>Last 30 minutes</code> for the validation timeframe, then click <code>Validate</code>.</p>\n<p>The validation results will show up below, shortly.</p>\n<h3 id=\"viewtheresultsinthevalidatedobjectives\">View the results in the validated objectives</h3>\n<p><img src=\"assets/04_03_srg_validation_results.png\" alt=\"SRG Validation Results\" /></p>\n<p>Below the Validation result, find the Validated objectives.  The result of each DQL query objective for the validation timeframe (last 30 minutes) will be shown.  The result is evaluated against the static thresholds to determine pass, warning, or fail.</p>\n<p>The worst evaluated objective result will be used to determine the overall Guardian validation result.  That is to say, if any of the objective results fail, then the validation result is fail.  You can use Automation workflow capabilities or IDP tooling capabilities to apply additional logic and quality gating.</p>","activityList":[]},{"id":"4.4","name":"Automate our SRG Validation","content":"<h2 id=\"automateoursrgvalidation\">Automate our SRG Validation</h2>\n<h3 id=\"bestpracticesonsrgworkflows\">Best Practices on SRG Workflows</h3>\n<p><img src=\"assets/04_04_srg_best_practices.png\" alt=\"Best Practices\" /></p>\n<p>TODO</p>\n<h3 id=\"triggeringsrgbasedonlifecycleevent\">Triggering SRG based on Lifecycle Event</h3>\n<p><img src=\"assets/04_04_srg_lifecycle_trigger.png\" alt=\"Trigger SRG on Lifecycle Event\" /></p>\n<ol>\n<li><p>From the Guardian overview, click on <code>Automate</code> to create a new Workflow automation</p></li>\n<li><p>A new Workflow automation will be created with an <code>Event Trigger</code> and a Site Reliability Guardian <code>Task</code> already configured.  Modify the <code>Event Trigger</code> to use <code>events</code> as the Event type.  Modify the <code>Filter query</code> using the query below:</p></li>\n</ol>\n<!-- DQL -->\n<pre><code class=\"hljs dql language-dql\"><span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(event.kind,<span class=\"hljs-string\">&quot;SDLC_EVENT&quot;</span>)</span></span> and \n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(event.type,<span class=\"hljs-string\">&quot;app-deployed.validated&quot;</span>)</span></span> and\n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(owner,<span class=\"hljs-string\">&quot;team01&quot;</span>)</span></span> and\n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(proj_name,<span class=\"hljs-string\">&quot;simplenodeservice&quot;</span>)</span></span> and\n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(stage,<span class=\"hljs-string\">&quot;preprod&quot;</span>)</span></span>\n</code></pre>\n<!-- DQL -->\n<p>Be sure to replace <code>owner</code>, <code>proj_name</code>, and <code>stage</code> values accordingly!</p>\n<p>Click on <code>Query past events</code> to see previous events that would have triggered the Workflow.</p>\n<ol start=\"3\">\n<li><p>Modify the <code>run_validation</code> SRG Task by updating the timeframe to use the Last 5 minutes (<code>-5m -&gt; Now</code>)</p></li>\n<li><p>Save the Workflow</p></li>\n</ol>\n<h3 id=\"triggerworkflowwithpreviousevent\">Trigger Workflow with previous event</h3>\n<p><img src=\"assets/04_04_srg_trigger_workflow.png\" alt=\"SRG Workflow Trigger\" /></p>\n<ol>\n<li><p>Click the <code>Run</code> button to trigger the Workflow execution manually based on a previous event context.</p></li>\n<li><p>The first time you run Workflows with your account as the Workflow actor, you will likely see a message about allowing the Workflow to use your permissions.  When Workflows execute, they execute with a subset of permissions that the actor has.  You can (optionally) configure this under <code>Settings -&gt; Authorization settings</code>.  Keep the default for this exercise.</p></li>\n<li><p>When the Event context appears, click the <code>Run</code> button to trigger the Workflow execution.</p></li>\n</ol>\n<p><img src=\"assets/04_04_srg_trigger_workflow_2.png\" alt=\"SRG Workflow Trigger Run\" /></p>\n<p>The Workflow should run successfully.  After the execution completes, check the <code>run_validation</code> task and look at the result.</p>\n<p>It's worth noting that in this current configuration, our Workflow is classified as a Simple Workflow.  Simple Workflows have a limited feature set and do not consume any Workflow licensing.  Simple Workflows include one trigger and one task.  To leverage the full capabilities of Workflows, simply add an additional task to it and Dynatrace will automatically convert it to a Standard Workflow.</p>\n<p><a href=\"https://docs.dynatrace.com/docs/analyze-explore-automate/workflows/simple-workflow\">Simple Workflow Documentation</a></p>\n<h3 id=\"checkthevalidationresultinsrgapp\">Check the validation result in SRG App</h3>\n<p><img src=\"assets/04_04_srg_validation_results.png\" alt=\"SRG Validation Result\" /></p>\n<p>Switch over to the Site Reliability Guardian App and locate your Guardian.  You will now see an additional (new) validation in the Validation history for you to review and analyze.</p>","activityList":[]},{"id":"4.5","name":"Summary","content":"<h2 id=\"summary\">Summary</h2>\n<p>TODO</p>","activityList":[]}]},{"id":"5","name":"Deploying a New Version","content":"<h2 id=\"deployinganewversion\">Deploying a New Version</h2>\n<p><img src=\"assets/05_00_new_release.png\" alt=\"New Release\" /></p>","activityList":[{"id":"5.1","name":"Create a New Branch","content":"<h2 id=\"createanewbranch\">Create a New Branch</h2>\n<h3 id=\"viewthesourcerepoandcreateanewbranch\">View the source repo and create a new branch</h3>\n<p><img src=\"assets/05_01_gitlab_create_new_branch.png\" alt=\"GitLab New Branch\" /></p>\n<p><img src=\"assets/05_01_gitlab_branch_name.png\" alt=\"GitLab Name Branch\" /></p>\n<p><img src=\"assets/05_01_gitlab_version_change.png\" alt=\"GitLab Version Change\" /></p>","activityList":[]},{"id":"5.2","name":"Submit a Merge Request","content":"<h2 id=\"submitamergerequest\">Submit a Merge Request</h2>\n<h3 id=\"createamergerequest\">Create a Merge Request</h3>\n<p><img src=\"assets/05_01_gitlab_good_title.png\" alt=\"GitLab Create Merge Request\" /></p>\n<p><img src=\"assets/05_01_argocd_sync.png\" alt=\"GitLab Merge Request ArgoCD\" /></p>","activityList":[]},{"id":"5.3","name":"Dynatrace Automation","content":"<h2 id=\"dynatraceautomation\">Dynatrace Automation</h2>\n<h3 id=\"releasevalidationfeedback\">Release Validation feedback</h3>\n<p><img src=\"assets/05_01_dynatrace_automation.png\" alt=\"Dynatrace Automation\" /></p>","activityList":[]},{"id":"5.4","name":"Summary","content":"<h2 id=\"summary\">Summary</h2>\n<p>TODO</p>","activityList":[]}]},{"id":"6","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<p><img src=\"assets/06_00_self_service.png\" alt=\"Self-Service Solution\" /></p>\n<p><img src=\"assets/06_00_platform_engineering_demo.png\" alt=\"Platform Engineering Demo\" /></p>","activityList":[{"id":"6.1","name":"Additional Hands-On Exercises","content":"<h2 id=\"additionalhandsonexercises\">Additional Hands-On Exercises</h2>\n<h3 id=\"exploreourgitlabargodashboards\">Explore our GitLab &amp; Argo Dashboards</h3>\n<p><img src=\"assets/06_01_gitlab_argo_dashboards.png\" alt=\"GitLab Argo Dashboards\" /></p>\n<h3 id=\"platformandapplicationlogs\">Platform and application logs</h3>\n<p><img src=\"assets/06_01_dynatrace_logs.png\" alt=\"Dynatrace Logs\" /></p>\n<h3 id=\"dynatracesynthetictests\">Dynatrace Synthetic Tests</h3>\n<p><img src=\"assets/06_01_dynatrace_synthetics.png\" alt=\"Dynatrace Synthetics\" /></p>\n<h3 id=\"argocdhealthwithopentelemetryandprometheus\">ArgoCD Health with OpenTelemetry and Prometheus</h3>\n<p><img src=\"assets/06_01_dynatrace_otel_prometheus.png\" alt=\"ArgoCD Health\" /></p>","activityList":[]}]}]