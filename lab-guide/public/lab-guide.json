[{"id":"1","name":"Introduction","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>TODO</p>","activityList":[{"id":"1.1","name":"Problem Statement","content":"<h2 id=\"problemstatement\">Problem Statement</h2>\n<p>TODDO</p>","activityList":[]},{"id":"1.2","name":"Platform Engineering","content":"<h2 id=\"platformengineering\">Platform Engineering</h2>\n<p>TODO</p>","activityList":[]},{"id":"1.3","name":"Internal Development Platforms","content":"<h2 id=\"internaldevelopmentplatforms\">Internal Development Platforms</h2>\n<p>TODO</p>","activityList":[]}]},{"id":"2","name":"Our Environment","content":"<h2 id=\"ourenvironment\">Our Environment</h2>\n<p>TODO</p>","activityList":[{"id":"2.1","name":"HOT Day Environment","content":"<h2 id=\"hotdayenvironment\">HOT Day Environment</h2>\n<p>TODO</p>","activityList":[]},{"id":"2.2","name":"HOT Day Goal","content":"<h2 id=\"hotdaygoal\">HOT Day Goal</h2>\n<p>TODO</p>","activityList":[]},{"id":"2.3","name":"Explore the IDP","content":"<h2 id=\"exploretheidp\">Explore the IDP</h2>\n<p>TODO </p>","activityList":[]},{"id":"2.4","name":"Hands-On: Dynatrace","content":"<h2 id=\"handsondynatrace\">Hands-On: Dynatrace</h2>\n<p>TODO</p>","activityList":[]},{"id":"2.5","name":"Hands-On: ArgoCD","content":"<h2 id=\"handsonargocd\">Hands-On: ArgoCD</h2>\n<p>TODO</p>","activityList":[]},{"id":"2.6","name":"Hands-On: GitLab","content":"<h2 id=\"handsongitlab\">Hands-On: GitLab</h2>\n<p>TODO</p>","activityList":[]},{"id":"2.7","name":"Hands-On: Backstage","content":"<h2 id=\"handsonbackstage\">Hands-On: Backstage</h2>\n<p>TODO</p>","activityList":[]}]},{"id":"3","name":"Self-Service Onboarding","content":"<h2 id=\"selfserviceonboarding\">Self-Service Onboarding</h2>\n<p>TODO</p>","activityList":[{"id":"3.1","name":"Backstage: New Component from Template","content":"<h2 id=\"backstagenewcomponentfromtemplate\">Backstage: New Component from Template</h2>\n<p>TODO</p>","activityList":[]},{"id":"3.2","name":"GitLab: Explore the new Repo","content":"<h2 id=\"gitlabexplorethenewrepo\">GitLab: Explore the new Repo</h2>\n<p>TODO</p>","activityList":[]},{"id":"3.3","name":"ArgoCD: Automatic Deployment to Kubernetes","content":"<h2 id=\"argocdautomaticdeploymenttokubernetes\">ArgoCD: Automatic Deployment to Kubernetes</h2>\n<p>TODO</p>","activityList":[]},{"id":"3.4","name":"Explore the New App","content":"<h2 id=\"explorethenewapp\">Explore the New App</h2>\n<p>TODO</p>","activityList":[]},{"id":"3.5","name":"Dynatrace: Observe the Results","content":"<h2 id=\"dynatraceobservetheresults\">Dynatrace: Observe the Results</h2>\n<p>TODO</p>","activityList":[]},{"id":"3.6","name":"Summary","content":"<h2 id=\"summary\">Summary</h2>\n<p>TODO</p>","activityList":[]}]},{"id":"4","name":"Release Validation","content":"<h2 id=\"releasevalidation\">Release Validation</h2>\n<p>Using Site Reliability Guardian and Workflows to automate release validation</p>\n<p><img src=\"assets/04_00_extend_release_validation.png\" alt=\"Release Validation\" /></p>\n<ul>\n<li>Introducing Site Reliability Guardian (SRG)</li>\n<li>Create our First SRG</li>\n<li>Run our First SRG Manually</li>\n<li>Automate our SRG Validation</li>\n<li>Summary</li>\n</ul>","activityList":[{"id":"4.1","name":"Site Reliability Guardian","content":"<h2 id=\"sitereliabilityguardian\">Site Reliability Guardian</h2>\n<p><img src=\"assets/04_01_introducing_srg.png\" alt=\"Introducing SRG\" /></p>\n<p>A Dynatrace app that automates release validation to check a newly deployed version's service availability, performance, capacity, and security objectives.</p>\n<p>A Guardian is a collection of defined objectives that are evaluated for a specified timeframe to determine pass, warning, or fail status.  An objective is a means for measuring your services such as performance, availability, and security. You can define an objective for your guardian that is validated on demand or automatically.</p>\n<p>Guardians are attached to Workflow automations, allowing them to be integrated into your software delivery lifecycle.</p>\n<p><img src=\"assets/04_01_best_practices_on_srg.png\" alt=\"Best Practices\" /></p>\n<p>Best Practices</p>\n<p>TODO</p>","activityList":[]},{"id":"4.2","name":"Create our First SRG","content":"<h2 id=\"createourfirstsrg\">Create our First SRG</h2>\n<p>Begin by opening the Site Reliability Guardian App within the Dynatrace environment.</p>\n<h3 id=\"tagsfororganizationandautomation\">Tags for organization and automation</h3>\n<p>SCREENSHOT</p>\n<ol>\n<li><p>Click on <code>+ Guardian</code> to create a new Guardian</p></li>\n<li><p>SRG provides some great templates to get you started, but today we'll choose <code>Create without template</code></p></li>\n<li><p>Give the Guardian a name, the same as the deployed app name.  Enter a description, such as <code>release validation for our deployment</code>.  To integrate the Guardian into the lifecycle on our IDP, specify the following tags:</p>\n<ul>\n<li>owner = the owner of the deployed app</li>\n<li>proj_name = the project of the deployed app</li>\n<li>stage = the stage of the deployed app</li>\n<li>notify = true</li></ul></li>\n</ol>\n<h3 id=\"variablesfordynamicdqlqueriesinourobjectives\">Variables for dynamic DQL queries in our objectives</h3>\n<p>SCREENSHOT</p>\n<ol>\n<li><p>Next to the Guardian name, click the <code>...</code> button and choose <code>Variables</code></p></li>\n<li><p>Specify the variable <code>name</code> and variable <code>value</code>, then click <code>Add</code></p></li>\n<li><p>Create the following variables:</p>\n<ul>\n<li>owner = the owner of the deployed app</li>\n<li>proj_name = the project of the deployed app</li>\n<li>stage = the stage of the deployed app</li></ul></li>\n<li><p>Click on the <code>+</code> button to Add new objective to the Guardian</p></li>\n</ol>\n<h3 id=\"usedqlqueriesfromournotebookasyourobjectives\">Use DQL queries from our Notebook as your objectives</h3>\n<p>SCREENSHOT</p>\n<p>Open the Notebooks App and find the Notebook titled <code>SRG Objectives</code>.  This Notebook contains the DQL queries that can be copied and pasted into the Guardian's objectives.  These queries include the variables that were defined in the previous step.</p>\n<h3 id=\"defineanobjectivewithdqlandstaticthresholds\">Define an objective with DQL and static thresholds</h3>\n<p>SCREENSHOT</p>\n<ol>\n<li><p>Give the objective a name.  Guardian objectives support DQL queries and Classic SLO metrics.  Choose <code>Grail using DQL</code>.  Paste the query from the Notebook into the <code>DQL Query</code> field.  Optionally, you can test the query manually from this screen.  If the query fails, that's OK; it's likely that the deployment needs more time to generate data for that objective.</p></li>\n<li><p>In the <code>Define thresholds</code> section, choose <code>Static thresholds</code>.  Our queries are all structured so that 100 is perfect and 0 is problematic.  Choose <code>A higher value is good for my result</code> with a <code>Fails if result &lt; 98</code> and <code>Warns if result &lt; 99</code></p></li>\n<li><p>Click on <code>Save</code> to save the Guardian and the objective.</p></li>\n</ol>\n<h3 id=\"optionallyaddtheremainingdqlobjectives\">(optionally) Add the remaining DQL objectives</h3>\n<p>Guardians require at least 1 objective.  Time permitting, complete the Guardian by adding the remaining 5 objectives, for a total of 6.</p>","activityList":[]},{"id":"4.3","name":"Run our First SRG Manually","content":"<h2 id=\"runourfirstsrgmanually\">Run our First SRG Manually</h2>\n<p>Guardians can be executed manually on-demand or through a Workflow automation.</p>\n<h3 id=\"manuallywithondemandvalidation\">Manually with On-Demand Validation</h3>\n<p>SCREENSHOT</p>\n<p>Open your Guardian and locate the <code>Validate</code> button in the top right corner.  Click it and choose <code>Last 30 minutes</code> for the validation timeframe, then click <code>Validate</code>.</p>\n<p>The validation results will show up below, shortly.</p>\n<h3 id=\"viewtheresultsinthevalidatedobjectives\">View the results in the validated objectives</h3>\n<p>SCREENSHOT</p>\n<p>Below the Validation result, find the Validated objectives.  The result of each DQL query objective for the validation timeframe (last 30 minutes) will be shown.  The result is evaluated against the static thresholds to determine pass, warning, or fail.</p>\n<p>The worst evaluated objective result will be used to determine the overall Guardian validation result.  That is to say, if any of the objective results fail, then the validation result is fail.  You can use Automation workflow capabilities or IDP tooling capabilities to apply additional logic and quality gating.</p>","activityList":[]},{"id":"4.4","name":"Automate our SRG Validation","content":"<h2 id=\"automateoursrgvalidation\">Automate our SRG Validation</h2>\n<h3 id=\"bestpracticesonsrgworkflows\">Best Practices on SRG Workflows</h3>\n<p>SCREENSHOT</p>\n<p>TODO</p>\n<h3 id=\"triggeringsrgbasedonlifecycleevent\">Triggering SRG based on Lifecycle Event</h3>\n<p>SCREENSHOT</p>\n<ol>\n<li><p>From the Guardian overview, click on <code>Automate</code> to create a new Workflow automation</p></li>\n<li><p>A new Workflow automation will be created with an <code>Event Trigger</code> and a Site Reliability Guardian <code>Task</code> already configured.  Modify the <code>Event Trigger</code> to use <code>events</code> as the Event type.  Modify the <code>Filter query</code> using the query below:</p></li>\n</ol>\n<!-- DQL -->\n<pre><code class=\"hljs dql language-dql\"><span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(event.kind,<span class=\"hljs-string\">&quot;SDLC_EVENT&quot;</span>)</span></span> and \n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(event.type,<span class=\"hljs-string\">&quot;app-deployed.validated&quot;</span>)</span></span> and\n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(owner,<span class=\"hljs-string\">&quot;team01&quot;</span>)</span></span> and\n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(proj_name,<span class=\"hljs-string\">&quot;simplenodeservice&quot;</span>)</span></span> and\n<span class=\"hljs-function\"><span class=\"hljs-title\">matchesValue</span><span class=\"hljs-params\">(stage,<span class=\"hljs-string\">&quot;preprod&quot;</span>)</span></span>\n</code></pre>\n<!-- DQL -->\n<p>Be sure to replace <code>owner</code>, <code>proj_name</code>, and <code>stage</code> values accordingly!</p>\n<p>Click on <code>Query past events</code> to see previous events that would have triggered the Workflow.</p>\n<ol start=\"3\">\n<li><p>Modify the <code>run_validation</code> SRG Task by updating the timeframe to use the Last 5 minutes (<code>-5m -&gt; Now</code>)</p></li>\n<li><p>Save the Workflow</p></li>\n</ol>\n<h3 id=\"triggerworkflowwithpreviousevent\">Trigger Workflow with previous event</h3>\n<p>SCREENSHOT</p>\n<ol>\n<li><p>Click the <code>Run</code> button to trigger the Workflow execution manually based on a previous event context.</p></li>\n<li><p>The first time you run Workflows with your account as the Workflow actor, you will likely see a message about allowing the Workflow to use your permissions.  When Workflows execute, they execute with a subset of permissions that the actor has.  You can (optionally) configure this under <code>Settings -&gt; Authorization settings</code>.  Keep the default for this exercise.</p></li>\n<li><p>When the Event context appears, click the <code>Run</code> button to trigger the Workflow execution.</p></li>\n</ol>\n<p>SCREENSHOT</p>\n<p>The Workflow should run successfully.  After the execution completes, check the <code>run_validation</code> task and look at the result.</p>\n<p>It's worth noting that in this current configuration, our Workflow is classified as a Simple Workflow.  Simple Workflows have a limited feature set and do not consume any Workflow licensing.  Simple Workflows include one trigger and one task.  To leverage the full capabilities of Workflows, simply add an additional task to it and Dynatrace will automatically convert it to a Standard Workflow.</p>\n<p><a href=\"https://docs.dynatrace.com/docs/analyze-explore-automate/workflows/simple-workflow\">Simple Workflow Documentation</a></p>\n<h3 id=\"checkthevalidationresultinsrgapp\">Check the validation result in SRG App</h3>\n<p>SCREENSHOT</p>\n<p>Switch over to the Site Reliability Guardian App and locate your Guardian.  You will now see an additional (new) validation in the Validation history for you to review and analyze.</p>","activityList":[]},{"id":"4.5","name":"Summary","content":"<h2 id=\"summary\">Summary</h2>\n<p>TODO</p>","activityList":[]}]},{"id":"5","name":"Deploying a New Version","content":"<h2 id=\"deployinganewversion\">Deploying a New Version</h2>\n<p>TODO</p>","activityList":[{"id":"5.1","name":"Create a New Branch","content":"<h2 id=\"createanewbranch\">Create a New Branch</h2>\n<p>TODO</p>","activityList":[]},{"id":"5.2","name":"Submit a Merge Request","content":"<h2 id=\"submitamergerequest\">Submit a Merge Request</h2>\n<p>TODO</p>","activityList":[]},{"id":"5.3","name":"Deployment with ArgoCD","content":"<h2 id=\"deploymentwithargocd\">Deployment with ArgoCD</h2>\n<p>TODO</p>","activityList":[]},{"id":"5.4","name":"SDLC Observability and Deployment Validation with Dynatrace","content":"<h2 id=\"sdlcobservabilityanddeploymentvalidationwithdynatrace\">SDLC Observability and Deployment Validation with Dynatrace</h2>\n<p>TODO</p>","activityList":[]},{"id":"5.5","name":"Notifications to Backstage and GitLab","content":"<h2 id=\"notificationstobackstageandgitlab\">Notifications to Backstage and GitLab</h2>\n<p>TODO</p>","activityList":[]},{"id":"5.6","name":"Summary","content":"<h2 id=\"summary\">Summary</h2>\n<p>TODO</p>","activityList":[]}]},{"id":"6","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<p>TODO</p>","activityList":[]}]